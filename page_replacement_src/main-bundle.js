(()=>{"use strict";var e={498:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=class{constructor(e){this.visible=!1,this.playing=!1,this.speed=1,this.GUI=null,this.MENU=null,this.play_pause_button=null,this.step_button=null,this.stop_button=null,this.speed_slider=null,this.info_algorithm=null,this.info_time=null,this.info_is_done=null,this.info_in_queue=null,this.info_finished=null,this.info_total_page_faults=null,this.info_total_page_hits=null,this.frame_rows=[],this.see_code_button=null,this.storedSetInterval=null,this.menu=e}init(){this.GUI=document.getElementById("animation_gui"),this.MENU=document.getElementById("settings"),this.play_pause_button=document.getElementById("animation_play_pause"),this.step_button=document.getElementById("animation_step"),this.stop_button=document.getElementById("animation_stop"),this.speed_slider=document.getElementById("animation_speed_slider"),this.info_algorithm=document.getElementById("animation_info_algorithm_value"),this.info_time=document.getElementById("animation_info_time_value"),this.info_is_done=document.getElementById("animation_is_done"),this.info_in_queue=document.getElementById("calls_in_queue_value"),this.info_finished=document.getElementById("calls_finished_value"),this.info_total_page_faults=document.getElementById("total_page_faults_value"),this.info_total_page_hits=document.getElementById("total_page_hits_value"),this.see_code_button=document.getElementById("code_button"),this.info_is_done.style.display="none",this.play_pause_button.addEventListener("click",(()=>{this.togglePlaying()})),this.step_button.addEventListener("click",(()=>{this.step()})),this.stop_button.addEventListener("click",(()=>{this.toggleVisible(!1)})),this.speed_slider.addEventListener("input",(()=>{this.speed=parseInt(this.speed_slider.value),this.refreshSpeed()})),this.see_code_button.addEventListener("click",(()=>{if(null==this.menu.memory.algorithm)return;const e=this.menu.memory.algorithm.name;window.open(`https://github.com/brun0ne/scheduling-sim/blob/main/page_replacement_src/classes/algorithms/${e}.ts`,"_blank").focus()})),this.refreshSpeed(),this.initStateTable()}togglePlaying(e){this.playing=null==e?!this.playing:e,this.refreshSpeed(),this.play_pause_button.innerHTML=this.playing?"Pause":"Play"}toggleVisible(e){this.visible=null==e?!this.visible:e,this.visible?(this.GUI.style.display="block",this.MENU.style.display="none",this.menu.display.resizeCallback=()=>{this.drawCurrentState()},this.drawCurrentState()):(this.GUI.style.display="none",this.MENU.style.display="flex",null!=this.storedSetInterval&&clearInterval(this.storedSetInterval),this.menu.display.resizeCallback=()=>{this.menu.refreshCalls()},this.menu.refreshCalls())}reset(){if(null==this.play_pause_button||null==this.info_is_done||null==this.step_button)throw new Error("call init() first!");this.menu.memory.init(),this.play_pause_button.innerHTML="Play",this.playing=!1,this.info_is_done.style.display="none",this.play_pause_button.disabled=!1,this.step_button.disabled=!1,this.initStateTable()}startAnimation(){this.reset(),this.toggleVisible(!0)}drawCurrentState(){this.refreshInfo(),this.drawCalls()}initStateTable(){const e=document.getElementById("animation_table_time"),t=document.getElementById("animation_table_page_calls"),l=document.getElementById("animation_table_body");e.innerHTML="",t.innerHTML="";{const t=document.createElement("th");t.innerHTML="Time",t.classList.add("header"),e.appendChild(t)}{const e=document.createElement("th");e.innerHTML="Page calls",e.classList.add("header"),t.appendChild(e)}{for(;null!=l.lastChild&&"animation_table_page_calls"!=l.lastChild.id;)l.removeChild(l.lastChild);const e=[];for(let t=0;t<this.menu.memory.number_of_frames;t++){const s=document.createElement("tr"),i=document.createElement("th");i.innerHTML=`Frame ${t}`,s.appendChild(i),e.push(s),l.appendChild(s)}this.frame_rows=e}}drawCalls(e,t,l,s,i){const a=document.getElementById("animation_table_time"),n=document.getElementById("animation_table_page_calls"),o=this.menu.memory.previous_page_calls.at(-1);if(null==o)return;{const e=document.createElement("th");e.innerHTML=`${this.menu.memory.time}`,a.appendChild(e)}{const e=document.createElement("th");e.innerHTML=`${o.id}`,n.appendChild(e)}for(let e=0;e<this.menu.memory.number_of_frames;e++){const t=this.frame_rows[e],l=this.menu.memory.frames[e].page,s=document.createElement("th");s.innerHTML=`${null!=l?l.id:""}`,null!=l&&l.id==o.id&&this.menu.memory.last_call_caused_fault&&(s.style.backgroundColor="red"),t.appendChild(s)}const r=document.getElementById("animation_call_table");r.scrollLeft=r.scrollWidth}refreshInfo(){const e=this.menu.memory;if(null==e.algorithm)throw new Error("call startAnimation() first!");this.info_algorithm.innerHTML=e.algorithm.name,this.info_time.innerHTML=e.time.toString(),e.isFinished()?this.info_is_done.style.display="block":this.info_is_done.style.display="none",this.info_total_page_hits.innerHTML=(e.previous_page_calls.length-e.total_page_faults).toString(),this.info_total_page_faults.innerHTML=e.total_page_faults.toString(),this.info_in_queue.innerHTML=e.page_call_queue.length.toString(),this.info_finished.innerHTML=e.previous_page_calls.length.toString()}refreshSpeed(){null!=this.storedSetInterval&&clearInterval(this.storedSetInterval),this.storedSetInterval=setInterval((()=>{this.playing&&this.step()}).bind(this),1e3/this.speed)}step(){this.menu.memory.isFinished()||(this.menu.memory.nextTick(),this.drawCurrentState(),this.menu.memory.isFinished()&&(this.togglePlaying(!1),this.menu.memory.displayResults(this.menu.memory.getResults()),this.afterDone()))}afterDone(){if(null==this.info_is_done||null==this.play_pause_button||null==this.step_button)throw new Error("call init() first!");this.info_is_done.style.display="block",this.play_pause_button.disabled=!0,this.step_button.disabled=!0}}},752:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=class{constructor(){this.page=null}}},495:function(e,t,l){var s=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const i=s(l(920)),a=s(l(752));t.default=class{constructor(){this.number_of_pages=0,this.number_of_frames=0,this.page_call_pool=[],this.page_call_queue=[],this.previous_page_calls=[],this.frames=[],this.algorithm=null,this.last_replaced_index=-1,this.last_call_caused_fault=!1,this.time=0,this.total_page_faults=0}init(e,t){this.number_of_pages=null!=e?e:this.number_of_pages,this.number_of_frames=null!=t?t:this.number_of_frames,this.page_call_queue=[...this.page_call_pool],this.frames=[],this.previous_page_calls=[],this.time=0,this.total_page_faults=0;for(let e=0;e<this.number_of_frames;e++)this.frames.push(new a.default)}addPageCallToPool(e){this.page_call_pool.push(e)}addPageCallsToPool(e){for(let t=0;t<e.length;t++)this.page_call_pool.push(new i.default(e[t]))}clearPageCallPool(){this.page_call_pool=[]}setAlgorithm(e){this.algorithm=e}nextTick(){var e,t,l,s;if(null==this.algorithm)throw new Error("No algorithm selected");const i=this.page_call_queue.shift();if(null==i)return console.warn("Empty page call queue but not finished"),void this.time++;if(this.previous_page_calls.push(i),console.log("Page call: "+i.id),i){null===(t=(e=this.algorithm).onPageCall)||void 0===t||t.call(e,i);let a=!0;for(let e=0;e<this.frames.length;e++){if(null==this.frames[e])throw new Error("Frame is null");if(null==this.frames[e].page){this.frames[e].page=i,this.last_replaced_index=e,this.total_page_faults++,this.last_call_caused_fault=!0,a=!1;break}if(this.frames[e].page.id==i.id){null===(s=(l=this.algorithm).onPageAlreadyInMemory)||void 0===s||s.call(l,i),this.last_call_caused_fault=!1,a=!1;break}}if(a){if(console.log("Page fault: "+i.id),null!=this.frames.find((e=>null==e.page)))throw new Error("Initial page fill not handled properly");this.total_page_faults++,this.last_call_caused_fault=!0;const e={page_call:i,last_replaced_index:this.last_replaced_index,current_frames:this.frames,future_page_calls:this.page_call_queue,previous_page_calls:this.previous_page_calls},t=this.algorithm.handlePageFault(e);this.frames[t].page=i,this.last_replaced_index=t}let n=!1;for(const e of this.frames)if(null!=e.page&&e.page.id==i.id){n=!0;break}if(!n)throw new Error("Page fault not handled properly - page not in memory");i.call(this.time)}this.time++}isFinished(){return 0==this.page_call_queue.length}simulate(){for(this.init();!this.isFinished();)this.nextTick();return this.getResults()}getResults(){return{total_page_faults:this.total_page_faults,total_page_hits:this.previous_page_calls.length-this.total_page_faults,total_page_calls:this.previous_page_calls.length}}printFrames(){console.log("Frames:");for(const e of this.frames)console.log(e.page?e.page.id:"null")}displayResults(e,t=this.algorithm.name){document.getElementById("results_wrapper").style.display="flex",document.getElementById("results").innerHTML=`\n        Algorithm: ${t.toUpperCase()}\n\n        Total page faults: <b style='color: red'>${e.total_page_faults.toFixed(0)}</b>\n        Total page hits: <b style='color: lime'>${e.total_page_hits.toFixed(0)}</b>\n        Total page calls: <b>${e.total_page_calls.toFixed(0)}</b>\n        `.replace(RegExp("\n","g"),"<br />")}compareAllAndDisplayResults(e){document.getElementById("results_wrapper").style.display="flex";const t=document.getElementById("results");t.innerHTML="";for(let l=0;l<e.length;l++){this.setAlgorithm(e[l]);const s=this.simulate();t.innerHTML+=`\n            Algorithm: ${e[l].name.toUpperCase()}\n            Total page faults: <b style='color: red'>${s.total_page_faults.toFixed(0)}</b>\n            Total page hits: <b style='color: lime'>${s.total_page_hits.toFixed(0)}</b>\n            Total page calls: <b>${s.total_page_calls.toFixed(0)}</b>\n            `.replace(RegExp("\n","g"),"<br />"),t.innerHTML+="<br />"}}}},268:function(e,t,l){var s=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const i=s(l(617)),a=s(l(498)),n=s(l(495)),o=s(l(238)),r=s(l(789)),u=s(l(93)),d=s(l(429)),h=s(l(436));t.default=class{constructor(){this.display=new i.default,this.memory=new n.default,this.animationGUI=new a.default(this)}init(){document.getElementById("run_button").addEventListener("click",(()=>{this.run()})),document.getElementById("run_with_animation_button").addEventListener("click",(()=>{this.run(!0)})),document.getElementById("add_button").addEventListener("click",(()=>{this.addCalls()})),document.getElementById("clear_button").addEventListener("click",(()=>{this.clearCalls()})),this.memory.init(5,3),this.display.init("main_canvas"),this.animationGUI.init(),this.display.setResizeCallback((()=>{this.refreshCalls()})),document.getElementById("s_page_count").addEventListener("change",(e=>{const t=parseInt(e.target.value);isNaN(t)||t<1?alert("Invalid number of pages"):(this.memory.init(t,this.memory.number_of_frames),this.clearCalls(),this.refreshCalls())})),document.getElementById("s_frame_count").addEventListener("change",(e=>{const t=parseInt(e.target.value);isNaN(t)||t<1?alert("Invalid number of frames"):(this.memory.init(this.memory.number_of_pages,t),this.refreshCalls())})),document.getElementById("c_distribution").addEventListener("change",(e=>{const t=e.target.value.toLowerCase(),l=document.getElementById("c_window_size_all"),s=document.getElementById("c_window_delta_all");switch(t){case"uniform":l.style.display="none",s.style.display="none";break;case"locality":l.style.display="block",s.style.display="block";break;default:alert("Invalid distribution")}})),document.getElementById("a_type").addEventListener("change",(e=>{"compare_all"===e.target.value.toLowerCase()?document.getElementById("run_with_animation_button").setAttribute("disabled","true"):document.getElementById("run_with_animation_button").removeAttribute("disabled")})),document.getElementById("results_close").addEventListener("click",(()=>{document.getElementById("results_wrapper").style.display="none"})),this.refreshCalls()}addCalls(){const e=document.getElementById("c_distribution").value,t=parseInt(document.getElementById("c_count").value);switch(e){case"uniform":for(let e=0;e<t;e++)this.memory.addPageCallsToPool([Math.floor(Math.random()*this.memory.number_of_pages)]);break;case"locality":{const e=parseInt(document.getElementById("c_window_size").value),l=parseInt(document.getElementById("c_window_delta").value);if(isNaN(e)||isNaN(l))return void alert("Invalid input");if(e>this.memory.number_of_pages)return void alert("Window size is bigger than number of pages");if(l>this.memory.number_of_pages)return void alert("Window delta is bigger than number of pages");let s=Math.floor(Math.random()*(this.memory.number_of_pages-e));for(let i=0;i<t;i++){const t=Math.floor(Math.random()*e)+s;this.memory.addPageCallsToPool([t]),s=(s+(Math.floor(Math.random()*(2*l+1))-l))%(this.memory.number_of_pages-e),this.memory.number_of_pages-e==0&&(s=0),s<0&&(s+=this.memory.number_of_pages)}break}default:return void alert("Invalid distribution")}this.refreshCalls()}clearCalls(){this.memory.clearPageCallPool(),this.refreshCalls()}refreshCalls(){console.log("Calls in pool: "+this.memory.page_call_pool.length),document.getElementById("p_current_count").innerHTML=`(${this.memory.page_call_pool.length.toString()})`;const e=document.getElementById("current_page_calls_val");e.innerHTML=this.memory.page_call_pool.reduce(((e,t)=>e+t.id.toString()+", "),"").slice(0,-2),0==this.memory.page_call_pool.length&&(e.innerHTML="<span style='color: yellow'>empty</span>")}run(e){let t=!1;switch(document.getElementById("a_type").value.toLowerCase()){case"fifo":this.memory.setAlgorithm(new o.default);break;case"opt":this.memory.setAlgorithm(new r.default);break;case"lru":this.memory.setAlgorithm(new u.default);break;case"alru":this.memory.setAlgorithm(new d.default);break;case"rand":this.memory.setAlgorithm(new h.default);break;case"compare_all":t=!0;break;default:alert("Invalid algorithm")}if(t){const e=[new o.default,new r.default,new u.default,new d.default,new h.default];this.memory.compareAllAndDisplayResults(e)}else if(e)this.animationGUI.startAnimation();else{const e=this.memory.simulate();this.memory.displayResults(e)}}}},920:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=class{constructor(e){this.id=e,this.last_call_time=0}call(e){this.last_call_time=e}}},429:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=class{constructor(){this.name="ALRU",this.bit_array=[]}onPageCall(e){null==this.bit_array[e.id]&&(this.bit_array[e.id]=!1)}onPageAlreadyInMemory(e){this.bit_array[e.id]=!0}handlePageFault(e){for(let t=0;t<e.current_frames.length;t++){const l=e.current_frames[t];if(null==l.page)return console.warn("Frame is empty - this should be ensured not to happen by the caller"),t;if(0==this.bit_array[l.page.id])return t;this.bit_array[l.page.id]=!1}return 0}}},238:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=class{constructor(){this.name="FIFO"}handlePageFault(e){return(e.last_replaced_index+1)%e.current_frames.length}}},93:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=class{constructor(){this.name="LRU"}handlePageFault(e){let t=-1,l=-1;for(let s=0;s<e.current_frames.length;s++){const i=e.current_frames[s];if(null==i.page)return console.warn("Frame is empty - this should be ensured not to happen by the caller"),s;let a=-1;for(let t=e.previous_page_calls.length-1;t>=0;t--)if(e.previous_page_calls[t].id==i.page.id){a=t;break}if(-1==a)return s;(a<l||-1==l)&&(t=s,l=a)}return t}}},789:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=class{constructor(){this.name="OPT"}handlePageFault(e){let t=-1,l=-1;for(let s=0;s<e.current_frames.length;s++){const i=e.current_frames[s];if(null==i.page)return console.warn("Frame is empty - this should be ensured not to happen by the caller"),s;let a=-1;for(let t=0;t<e.future_page_calls.length;t++)if(e.future_page_calls[t].id==i.page.id){a=t;break}if(-1==a)return s;a>l&&(t=s,l=a)}return t}}},436:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=class{constructor(){this.name="RAND"}handlePageFault(e){return Math.floor(Math.random()*e.current_frames.length)}}},965:function(e,t,l){var s=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const i=s(l(268)),a=s(l(495)),n=s(l(429));!function(){if("undefined"!=typeof document)(new i.default).init();else{const e=new a.default;for(e.init(5,3),e.addPageCallsToPool([1,2,3,4,1,2,5,1,2,3,4,5]),e.setAlgorithm(new n.default);e.page_call_queue.length>0;)e.nextTick(),e.printFrames();console.log("Total page faults: "+e.total_page_faults)}}()},617:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=class{constructor(){this.ctx=null,this.resizeCallback=null}init(e){const t=document.getElementById(e);this.ctx=t.getContext("2d"),window.addEventListener("resize",this.resizeToFit.bind(this)),this.resizeToFit()}resizeToFit(){null!=this.ctx&&(this.ctx.canvas.width=window.innerWidth,this.ctx.canvas.height=window.innerHeight,null!=this.resizeCallback&&this.resizeCallback())}setResizeCallback(e){this.resizeCallback=e}}}},t={};!function l(s){var i=t[s];if(void 0!==i)return i.exports;var a=t[s]={exports:{}};return e[s].call(a.exports,a,a.exports,l),a.exports}(965)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,