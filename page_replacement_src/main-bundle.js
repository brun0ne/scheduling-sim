(()=>{"use strict";var e={498:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=class{constructor(e){this.visible=!1,this.playing=!1,this.speed=1,this.GUI=null,this.MENU=null,this.menu=e}init(){throw new Error("Method not implemented.")}togglePlaying(e){throw new Error("Method not implemented.")}toggleVisible(e){throw new Error("Method not implemented.")}reset(){throw new Error("Method not implemented.")}startAnimation(){throw new Error("Method not implemented.")}drawCurrentState(){throw new Error("Method not implemented.")}drawCalls(e,t,l,a,r){throw new Error("Method not implemented.")}refreshInfo(){throw new Error("Method not implemented.")}refreshSpeed(){throw new Error("Method not implemented.")}step(){throw new Error("Method not implemented.")}afterDone(){throw new Error("Method not implemented.")}}},752:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=class{constructor(){this.page=null}}},495:function(e,t,l){var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const r=a(l(920)),s=a(l(752));t.default=class{constructor(){this.number_of_pages=0,this.number_of_frames=0,this.page_call_pool=[],this.page_call_queue=[],this.previous_page_calls=[],this.frames=[],this.algorithm=null,this.last_replaced_index=-1,this.time=0,this.total_page_faults=0}init(e,t){this.number_of_pages=null!=e?e:this.number_of_pages,this.number_of_frames=null!=t?t:this.number_of_frames,this.page_call_queue=[...this.page_call_pool],this.frames=[],this.previous_page_calls=[],this.time=0,this.total_page_faults=0;for(let e=0;e<this.number_of_frames;e++)this.frames.push(new s.default)}addPageCallToPool(e){this.page_call_pool.push(e)}addPageCallsToPool(e){for(let t=0;t<e.length;t++)this.page_call_pool.push(new r.default(e[t]))}clearPageCallPool(){this.page_call_pool=[]}setAlgorithm(e){this.algorithm=e}nextTick(){var e,t,l,a;if(null==this.algorithm)throw new Error("No algorithm selected");const r=this.page_call_queue.shift();if(null==r)return console.warn("Empty page call queue but not finished"),void this.time++;if(this.previous_page_calls.push(r),console.log("Page call: "+r.id),r){null===(t=(e=this.algorithm).onPageCall)||void 0===t||t.call(e,r);let s=!0;for(let e=0;e<this.frames.length;e++){if(null==this.frames[e])throw new Error("Frame is null");if(null==this.frames[e].page){this.frames[e].page=r,this.last_replaced_index=e,this.total_page_faults++,s=!1;break}if(this.frames[e].page.id==r.id){null===(a=(l=this.algorithm).onPageAlreadyInMemory)||void 0===a||a.call(l,r),s=!1;break}}if(s){if(console.log("Page fault: "+r.id),null!=this.frames.find((e=>null==e.page)))throw new Error("Initial page fill not handled properly");this.total_page_faults++;const e={page_call:r,last_replaced_index:this.last_replaced_index,current_frames:this.frames,future_page_calls:this.page_call_queue,previous_page_calls:this.previous_page_calls},t=this.algorithm.handlePageFault(e);this.frames[t].page=r,this.last_replaced_index=t}let n=!1;for(const e of this.frames)if(null!=e.page&&e.page.id==r.id){n=!0;break}if(!n)throw new Error("Page fault not handled properly - page not in memory");r.call(this.time)}this.time++}simulate(){for(this.init();this.page_call_queue.length>0;)this.nextTick();return{total_page_faults:this.total_page_faults}}printFrames(){console.log("Frames:");for(const e of this.frames)console.log(e.page?e.page.id:"null")}displayResults(e,t=this.algorithm.name){document.getElementById("results_wrapper").style.display="flex",document.getElementById("results").innerHTML=`\n        Algorithm: ${t.toUpperCase()}\n\n        Total page faults: ${e.total_page_faults.toFixed(0)}\n        `.replace(RegExp("\n","g"),"<br />")}compareAllAndDisplayResults(e){document.getElementById("results_wrapper").style.display="flex";const t=document.getElementById("results");t.innerHTML="";for(let l=0;l<e.length;l++){this.setAlgorithm(e[l]);const a=this.simulate();t.innerHTML+=`\n            Algorithm: ${e[l].name.toUpperCase()}\n            Total page faults: ${a.total_page_faults}\n            `.replace(RegExp("\n","g"),"<br />"),t.innerHTML+="<br />"}}}},268:function(e,t,l){var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const r=a(l(617)),s=a(l(498)),n=a(l(495)),i=a(l(238)),o=a(l(789)),u=a(l(93)),d=a(l(429)),h=a(l(436));t.default=class{constructor(){this.display=new r.default,this.memory=new n.default,this.animationGUI=new s.default(this)}init(){document.getElementById("run_button").addEventListener("click",(()=>{this.run()})),document.getElementById("run_with_animation_button").addEventListener("click",(()=>{this.run(!0)})),document.getElementById("add_button").addEventListener("click",(()=>{this.addCalls()})),document.getElementById("clear_button").addEventListener("click",(()=>{this.clearCalls()})),this.display.init("main_canvas"),this.display.setResizeCallback((()=>{this.refreshCalls()})),document.getElementById("s_page_count").addEventListener("change",(e=>{const t=parseInt(e.target.value);isNaN(t)||t<1?alert("Invalid number of pages"):(this.memory.init(t,this.memory.number_of_frames),this.clearCalls(),this.refreshCalls())})),document.getElementById("s_frame_count").addEventListener("change",(e=>{const t=parseInt(e.target.value);isNaN(t)||t<1?alert("Invalid number of frames"):(this.memory.init(this.memory.number_of_pages,t),this.refreshCalls())})),document.getElementById("c_distribution").addEventListener("change",(e=>{const t=e.target.value.toLowerCase(),l=document.getElementById("c_window_size_all"),a=document.getElementById("c_window_delta_all");switch(t){case"uniform":l.style.display="none",a.style.display="none";break;case"locality":l.style.display="block",a.style.display="block";break;default:alert("Invalid distribution")}})),document.getElementById("a_type").addEventListener("change",(e=>{"compare_all"===e.target.value.toLowerCase()?document.getElementById("run_with_animation_button").setAttribute("disabled","true"):document.getElementById("run_with_animation_button").removeAttribute("disabled")})),document.getElementById("results_close").addEventListener("click",(()=>{document.getElementById("results_wrapper").style.display="none"})),this.memory.init(5,3),this.refreshCalls()}addCalls(){const e=document.getElementById("c_distribution").value,t=parseInt(document.getElementById("c_count").value);switch(e){case"uniform":for(let e=0;e<t;e++)this.memory.addPageCallsToPool([Math.floor(Math.random()*this.memory.number_of_pages)]);break;case"locality":{const e=parseInt(document.getElementById("c_window_size").value),l=parseInt(document.getElementById("c_window_delta").value);if(isNaN(e)||isNaN(l))return void alert("Invalid input");if(e>this.memory.number_of_pages)return void alert("Window size is bigger than number of pages");if(l>this.memory.number_of_pages)return void alert("Window delta is bigger than number of pages");let a=Math.floor(Math.random()*(this.memory.number_of_pages-e));for(let r=0;r<t;r++){const t=Math.floor(Math.random()*e)+a;this.memory.addPageCallsToPool([t]),a=(a+(Math.floor(Math.random()*(2*l+1))-l))%(this.memory.number_of_pages-e),this.memory.number_of_pages-e==0&&(a=0),a<0&&(a+=this.memory.number_of_pages)}break}default:return void alert("Invalid distribution")}this.refreshCalls()}clearCalls(){this.memory.clearPageCallPool(),this.refreshCalls()}refreshCalls(){console.log("Calls in pool: "+this.memory.page_call_pool.length),document.getElementById("p_current_count").innerHTML=`(${this.memory.page_call_pool.length.toString()})`;const e=document.getElementById("current_page_calls_val");e.innerHTML=this.memory.page_call_pool.reduce(((e,t)=>e+t.id.toString()+", "),"").slice(0,-2),0==this.memory.page_call_pool.length&&(e.innerHTML="<span style='color: yellow'>empty</span>")}run(e){let t=!1;switch(document.getElementById("a_type").value.toLowerCase()){case"fifo":this.memory.setAlgorithm(new i.default);break;case"opt":this.memory.setAlgorithm(new o.default);break;case"lru":this.memory.setAlgorithm(new u.default);break;case"alru":this.memory.setAlgorithm(new d.default);break;case"rand":this.memory.setAlgorithm(new h.default);break;case"compare_all":t=!0;break;default:alert("Invalid algorithm")}if(t){const e=[new i.default,new o.default,new u.default,new d.default,new h.default];this.memory.compareAllAndDisplayResults(e)}else if(e)alert("Not implemented yet"),this.animationGUI.startAnimation();else{const e=this.memory.simulate();this.memory.displayResults(e)}}}},920:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=class{constructor(e){this.id=e,this.last_call_time=0}call(e){this.last_call_time=e}}},429:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=class{constructor(){this.name="ALRU",this.bit_array=[]}onPageCall(e){null==this.bit_array[e.id]&&(this.bit_array[e.id]=!1)}onPageAlreadyInMemory(e){this.bit_array[e.id]=!0}handlePageFault(e){for(let t=0;t<e.current_frames.length;t++){const l=e.current_frames[t];if(null==l.page)return console.warn("Frame is empty - this should be ensured not to happen by the caller"),t;if(0==this.bit_array[l.page.id])return t;this.bit_array[l.page.id]=!1}return 0}}},238:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=class{constructor(){this.name="FIFO"}handlePageFault(e){return(e.last_replaced_index+1)%e.current_frames.length}}},93:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=class{constructor(){this.name="LRU"}handlePageFault(e){let t=-1,l=-1;for(let a=0;a<e.current_frames.length;a++){const r=e.current_frames[a];if(null==r.page)return console.warn("Frame is empty - this should be ensured not to happen by the caller"),a;let s=-1;for(let t=e.previous_page_calls.length-1;t>=0;t--)if(e.previous_page_calls[t].id==r.page.id){s=t;break}if(-1==s)return a;(s<l||-1==l)&&(t=a,l=s)}return t}}},789:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=class{constructor(){this.name="OPT"}handlePageFault(e){let t=-1,l=-1;for(let a=0;a<e.current_frames.length;a++){const r=e.current_frames[a];if(null==r.page)return console.warn("Frame is empty - this should be ensured not to happen by the caller"),a;let s=-1;for(let t=0;t<e.future_page_calls.length;t++)if(e.future_page_calls[t].id==r.page.id){s=t;break}if(-1==s)return a;s>l&&(t=a,l=s)}return t}}},436:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=class{constructor(){this.name="RAND"}handlePageFault(e){return Math.floor(Math.random()*e.current_frames.length)}}},965:function(e,t,l){var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const r=a(l(268)),s=a(l(495)),n=a(l(429));!function(){if("undefined"!=typeof document)(new r.default).init();else{const e=new s.default;for(e.init(5,3),e.addPageCallsToPool([1,2,3,4,1,2,5,1,2,3,4,5]),e.setAlgorithm(new n.default);e.page_call_queue.length>0;)e.nextTick(),e.printFrames();console.log("Total page faults: "+e.total_page_faults)}}()},617:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=class{constructor(){this.ctx=null,this.resizeCallback=null}init(e){const t=document.getElementById(e);this.ctx=t.getContext("2d"),window.addEventListener("resize",this.resizeToFit.bind(this)),this.resizeToFit()}resizeToFit(){null!=this.ctx&&(this.ctx.canvas.width=window.innerWidth,this.ctx.canvas.height=window.innerHeight,null!=this.resizeCallback&&this.resizeCallback())}setResizeCallback(e){this.resizeCallback=e}}}},t={};!function l(a){var r=t[a];if(void 0!==r)return r.exports;var s=t[a]={exports:{}};return e[a].call(s.exports,s,s.exports,l),s.exports}(965)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,