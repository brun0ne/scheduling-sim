(()=>{"use strict";var e={994:function(e,t,s){var l=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=l(s(752)),a=l(s(920)),i=l(s(463));t.default=class{constructor(){this.processes=[],this.frames=[],this.call_pool=[],this.call_queue=[],this.call_history=[],this.number_of_frames=0,this.number_of_pages=0,this.allocationAlgorithm=null,this.replacementAlgorithm=new i.default,this.total_page_faults=0,this.time=0,this.last_call_caused_fault=!1}init(e,t){this.number_of_pages=null!=e?e:this.number_of_pages,this.number_of_frames=null!=t?t:this.number_of_frames,this.call_queue=[...this.call_pool],this.frames=[],this.call_history=[],this.time=0,this.total_page_faults=0;for(let e=0;e<this.number_of_frames;e++)this.frames.push(new n.default)}addProcess(e){this.processes.push(e)}clearProcesses(){this.processes=[]}generatePageCallPool(){for(let e=0;e<this.processes.length;e++)this.processes[e].generateCalls(),this.addPageCallsToPool(this.processes[e].getCalls(),this.processes[e])}addPageCallToPool(e){this.call_pool.push(e)}addPageCallsToPool(e,t){for(let s=0;s<e.length;s++)this.addPageCallToPool(new a.default(e[s],t))}clearPageCallPool(){this.call_pool=[]}setAlgorithm(e){this.allocationAlgorithm=e}nextTick(){var e,t,s,l,n,a;if(null==this.allocationAlgorithm)throw new Error("No algorithm selected");const i=this.call_queue.shift();if(null==i)return console.warn("Empty page call queue but not finished"),void this.time++;if(this.call_history.push(i),console.log("Page call: "+i.id),i){null===(t=(e=this.allocationAlgorithm).allocateFrames)||void 0===t||t.call(e,this.frames,this.processes);const o=this.frames.filter((e=>null==e.process)).length;o>0&&console.warn(`Not all frames are allocated\nAllocated: ${this.frames.length-o}\nUnallocated: ${o}`),null===(l=(s=this.replacementAlgorithm).onPageCall)||void 0===l||l.call(s,this.getCurrentStateData(i));let r=!0;for(let e=0;e<this.frames.length;e++){if(null==this.frames[e])throw new Error("Frame is null");if(null==this.frames[e].page&&this.frames[e].process==i.process){this.frames[e].page=i,this.total_page_faults++,i.process.page_faults++,this.last_call_caused_fault=!0,r=!1;break}if(null!=this.frames[e].page&&this.frames[e].page.id==i.id){null===(a=(n=this.replacementAlgorithm).onPageAlreadyInMemory)||void 0===a||a.call(n,this.getCurrentStateData(i)),this.last_call_caused_fault=!1,r=!1;break}}if(r){if(console.log("Page fault: "+i.id),null!=this.frames.find((e=>e.process==i.process&&null==e.page)))throw new Error("Initial page fill not handled properly");this.total_page_faults++,i.process.page_faults++,this.last_call_caused_fault=!0;const e=this.replacementAlgorithm.handlePageFault(this.getCurrentStateData(i));-1!=e&&(this.frames[this.getFrameIndexById(e)].page=i)}let h=!1;for(const e of this.frames)if(null!=e.page&&e.page.id==i.id){h=!0;break}if(!h)throw new Error("Page fault not handled properly - page not in memory");i.call(this.time)}this.time++}getCurrentStateData(e){const t=this.frames.filter((t=>t.process==e.process)),s=this.call_history.filter((t=>t.process==e.process));return{page_call:e,current_frames:t,previous_page_calls:s,processes:this.processes}}isFinished(){return 0==this.call_queue.length}getFrameIndexById(e){for(let t=0;t<this.frames.length;t++)if(this.frames[t].id==e)return t;return-1}getResults(){return{total_page_faults:this.total_page_faults,total_page_hits:this.call_history.length-this.total_page_faults,total_calls:this.call_history.length}}simulate(){for(this.init();!this.isFinished();)this.nextTick();return this.getResults()}displayResults(e,t=this.allocationAlgorithm.name){document.getElementById("results_wrapper").style.display="flex",document.getElementById("results").innerHTML=`\n        Algorithm: ${t.toUpperCase()}\n\n        Total page faults: <b style='color: red'>${e.total_page_faults.toFixed(0)}</b>\n        Total page hits: <b style='color: lime'>${e.total_page_hits.toFixed(0)}</b>\n        Total page calls: <b>${e.total_calls.toFixed(0)}</b>\n        `.replace(RegExp("\n","g"),"<br />")}compareAllAndDisplayResults(e){document.getElementById("results_wrapper").style.display="flex";const t=document.getElementById("results");t.innerHTML="";for(let s=0;s<e.length;s++){this.setAlgorithm(e[s]);const l=this.simulate();t.innerHTML+=`\n            Algorithm: ${e[s].name.toUpperCase()}\n            Total page faults: <b style='color: red'>${l.total_page_faults.toFixed(0)}</b>\n            Total page hits: <b style='color: lime'>${l.total_page_hits.toFixed(0)}</b>\n            Total page calls: <b>${l.total_calls.toFixed(0)}</b>\n            `.replace(RegExp("\n","g"),"<br />"),t.innerHTML+="<br />"}}}},498:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=class{constructor(e){this.visible=!1,this.playing=!1,this.speed=1,this.GUI=null,this.MENU=null,this.play_pause_button=null,this.step_button=null,this.stop_button=null,this.speed_slider=null,this.info_algorithm=null,this.info_time=null,this.info_is_done=null,this.info_in_queue=null,this.info_finished=null,this.info_total_page_faults=null,this.info_total_page_hits=null,this.frame_rows=[],this.see_code_button=null,this.storedSetInterval=null,this.menu=e}init(){this.GUI=document.getElementById("animation_gui"),this.MENU=document.getElementById("settings"),this.play_pause_button=document.getElementById("animation_play_pause"),this.step_button=document.getElementById("animation_step"),this.stop_button=document.getElementById("animation_stop"),this.speed_slider=document.getElementById("animation_speed_slider"),this.info_algorithm=document.getElementById("animation_info_algorithm_value"),this.info_time=document.getElementById("animation_info_time_value"),this.info_is_done=document.getElementById("animation_is_done"),this.info_in_queue=document.getElementById("calls_in_queue_value"),this.info_finished=document.getElementById("calls_finished_value"),this.info_total_page_faults=document.getElementById("total_page_faults_value"),this.info_total_page_hits=document.getElementById("total_page_hits_value"),this.see_code_button=document.getElementById("code_button"),this.info_is_done.style.display="none",this.play_pause_button.addEventListener("click",(()=>{this.togglePlaying()})),this.step_button.addEventListener("click",(()=>{this.step()})),this.stop_button.addEventListener("click",(()=>{this.toggleVisible(!1)})),this.speed_slider.addEventListener("input",(()=>{this.speed=parseInt(this.speed_slider.value),this.refreshSpeed()})),this.see_code_button.addEventListener("click",(()=>{if(null==this.menu.memory.allocationAlgorithm)return;const e=this.menu.memory.allocationAlgorithm.name;window.open(`https://github.com/brun0ne/scheduling-sim/blob/main/page_replacement_src/classes/algorithms/${e}.ts`,"_blank").focus()})),this.refreshSpeed(),this.initStateTable()}togglePlaying(e){this.playing=null==e?!this.playing:e,this.refreshSpeed(),this.play_pause_button.innerHTML=this.playing?"Pause":"Play"}toggleVisible(e){this.visible=null==e?!this.visible:e,this.visible?(this.GUI.style.display="block",this.MENU.style.display="none",this.menu.display.resizeCallback=()=>{this.drawCurrentState()},this.drawCurrentState()):(this.GUI.style.display="none",this.MENU.style.display="flex",null!=this.storedSetInterval&&clearInterval(this.storedSetInterval),this.menu.display.resizeCallback=()=>{this.menu.refreshCalls()},this.menu.refreshCalls())}reset(){if(null==this.play_pause_button||null==this.info_is_done||null==this.step_button)throw new Error("call init() first!");this.menu.memory.init(),this.play_pause_button.innerHTML="Play",this.playing=!1,this.info_is_done.style.display="none",this.play_pause_button.disabled=!1,this.step_button.disabled=!1,this.initStateTable()}startAnimation(){this.reset(),this.toggleVisible(!0)}drawCurrentState(){this.refreshInfo(),this.drawCalls()}initStateTable(){const e=document.getElementById("animation_table_time"),t=document.getElementById("animation_table_page_calls"),s=document.getElementById("animation_table_body");e.innerHTML="",t.innerHTML="";{const t=document.createElement("th");t.innerHTML="Time",t.classList.add("header"),e.appendChild(t)}{const e=document.createElement("th");e.innerHTML="Page calls",e.classList.add("header"),t.appendChild(e)}{for(;null!=s.lastChild&&"animation_table_page_calls"!=s.lastChild.id;)s.removeChild(s.lastChild);const e=[];for(let t=0;t<this.menu.memory.number_of_frames;t++){const l=document.createElement("tr"),n=document.createElement("th");n.innerHTML=`Frame ${t}`,l.appendChild(n),e.push(l),s.appendChild(l)}this.frame_rows=e}}drawCalls(e,t,s,l,n){const a=document.getElementById("animation_table_time"),i=document.getElementById("animation_table_page_calls"),o=this.menu.memory.call_history.at(-1);if(null==o)return;{const e=document.createElement("th");e.innerHTML=`${this.menu.memory.time}`,a.appendChild(e)}{const e=document.createElement("th");e.innerHTML=`${o.id}`,i.appendChild(e)}for(let e=0;e<this.menu.memory.number_of_frames;e++){const t=this.frame_rows[e],s=this.menu.memory.frames[e].page,l=document.createElement("th");l.innerHTML=`${null!=s?s.id:""}`,null!=s&&s.id==o.id&&this.menu.memory.last_call_caused_fault&&(l.style.backgroundColor="red"),null!=this.menu.memory.frames[e].process&&(l.innerHTML+=` <span style='color: yellow'>(${this.menu.memory.frames[e].process.id})</span>`),t.appendChild(l)}const r=document.getElementById("animation_call_table");r.scrollLeft=r.scrollWidth}refreshInfo(){const e=this.menu.memory;if(null==e.allocationAlgorithm)throw new Error("call startAnimation() first!");this.info_algorithm.innerHTML=e.allocationAlgorithm.name,this.info_time.innerHTML=e.time.toString(),e.isFinished()?this.info_is_done.style.display="block":this.info_is_done.style.display="none",this.info_total_page_hits.innerHTML=(e.call_history.length-e.total_page_faults).toString(),this.info_total_page_faults.innerHTML=e.total_page_faults.toString(),this.info_in_queue.innerHTML=e.call_queue.length.toString(),this.info_finished.innerHTML=e.call_history.length.toString()}refreshSpeed(){null!=this.storedSetInterval&&clearInterval(this.storedSetInterval),this.storedSetInterval=setInterval((()=>{this.playing&&this.step()}).bind(this),1e3/this.speed)}step(){this.menu.memory.isFinished()||(this.menu.memory.nextTick(),this.drawCurrentState(),this.menu.memory.isFinished()&&(this.togglePlaying(!1),this.menu.memory.displayResults(this.menu.memory.getResults()),this.afterDone()))}afterDone(){if(null==this.info_is_done||null==this.play_pause_button||null==this.step_button)throw new Error("call init() first!");this.info_is_done.style.display="block",this.play_pause_button.disabled=!0,this.step_button.disabled=!0}}},752:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0});class s{constructor(){this.page=null,this.process=null,this.id=s.next_id++}}s.next_id=0,t.default=s},463:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=class{constructor(){this.name="LRU"}handlePageFault(e){let t=-1,s=-1;for(let l=0;l<e.current_frames.length;l++){const n=e.current_frames[l];if(n.process!=e.page_call.process&&console.error("Frame is assigned to a different process - this should be ensured not to happen by the caller"),null==n.page)return console.warn("Frame is empty - this should be ensured not to happen by the caller"),l;let a=-1;for(let t=e.previous_page_calls.length-1;t>=0;t--)if(e.previous_page_calls[t].id==n.page.id){a=t;break}if(-1==a)return l;(a<s||-1==s)&&(t=l,s=a)}return-1==t?(console.warn("No frame to replace found by LRU"),-1):e.current_frames[t].id}}},268:function(e,t,s){var l=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=l(s(617)),a=l(s(994)),i=l(s(950)),o=l(s(920)),r=l(s(382)),h=l(s(498)),u=l(s(634)),c=l(s(960));t.default=class{constructor(){this.display=new n.default,this.memory=new a.default,this.animationGUI=new h.default(this)}init(){document.getElementById("run_button").addEventListener("click",(()=>{this.run()})),document.getElementById("run_with_animation_button").addEventListener("click",(()=>{this.run(!0)})),document.getElementById("add_button").addEventListener("click",(()=>{this.addProcesses()})),document.getElementById("clear_button").addEventListener("click",(()=>{this.clearProcesses()})),document.getElementById("generate_call_queue_button").addEventListener("click",(()=>{this.addCalls()})),document.getElementById("clear_call_queue_button").addEventListener("click",(()=>{this.clearCalls()})),this.memory.init(5,3),this.display.init("main_canvas"),this.animationGUI.init(),this.display.setResizeCallback((()=>{this.refreshCalls()})),document.getElementById("s_frame_count").addEventListener("change",(e=>{const t=parseInt(e.target.value);isNaN(t)||t<1?alert("Invalid number of frames"):(this.memory.init(this.memory.number_of_pages,t),this.refreshCalls())})),document.getElementById("a_type").addEventListener("change",(e=>{"compare_all"===e.target.value.toLowerCase()?document.getElementById("run_with_animation_button").setAttribute("disabled","true"):document.getElementById("run_with_animation_button").removeAttribute("disabled"),"fault_control"===e.target.value.toLowerCase()?(document.getElementById("s_min_page_faults_all").style.display="block",document.getElementById("s_max_page_faults_all").style.display="block"):(document.getElementById("s_min_page_faults_all").style.display="none",document.getElementById("s_max_page_faults_all").style.display="none")})),document.getElementById("results_close").addEventListener("click",(()=>{document.getElementById("results_wrapper").style.display="none"})),this.refreshCalls()}addProcesses(){const e=parseInt(document.getElementById("c_count").value),t=parseInt(document.getElementById("s_min_range").value),s=parseInt(document.getElementById("s_max_range").value),l=parseInt(document.getElementById("s_min_calls").value),n=parseInt(document.getElementById("s_max_calls").value);let a=0;for(let o=0;o<e;o++){const e=Math.floor(Math.random()*(s-t+1))+t;this.memory.addProcess(new i.default([a,a+e],Math.floor(Math.random()*(n-l+1))+l,o)),this.memory.processes[this.memory.processes.length-1].generateCalls(),a+=e}this.refreshCalls()}clearProcesses(){this.memory.clearProcesses(),this.refreshCalls()}addCalls(){for(let e=0;e<this.memory.processes.length;e++)for(let t=0;t<this.memory.processes[e].getCalls().length;t++)this.memory.call_pool.push(new o.default(this.memory.processes[e].getCalls()[t],this.memory.processes[e]));this.memory.call_pool.sort((()=>Math.random()-.5)),this.refreshCalls()}clearCalls(){this.memory.call_pool=[],this.refreshCalls()}refreshCalls(){document.getElementById("p_current_count").innerHTML=`(${this.memory.processes.length.toString()})`;const e=document.getElementById("generate_call_queue_button");this.memory.processes.length>0&&0==this.memory.call_pool.length?e.removeAttribute("disabled"):e.attributes.setNamedItem(document.createAttribute("disabled"));const t=document.getElementById("all_processes");t.innerHTML="";for(let e=0;e<this.memory.processes.length;e++){const s=this.memory.processes[e],l=document.createElement("span");l.classList.add("process"),l.innerHTML=`<span class="process_name">Calls for process ${e}: </span> <span class="process_calls">${s.getCalls().join(", ")}</span><br />`,t.appendChild(l)}0==this.memory.processes.length&&(t.innerHTML="<span style='color: yellow'>No processes added yet.</span>"),document.getElementById("current_call_count").innerHTML=`(${this.memory.call_pool.length.toString()})`;const s=document.getElementById("main_call_queue");s.innerHTML=this.memory.call_pool.map((e=>e.id)).join(", "),0==this.memory.call_pool.length&&(s.innerHTML="<span style='color: yellow'>No calls in queue.</span>")}run(e){if(this.memory.processes.length>this.memory.frames.length)return void alert("Not enough frames for all processes");let t=!1;switch(document.getElementById("a_type").value.toLowerCase()){case"equal":this.memory.setAlgorithm(new r.default);break;case"proportional":this.memory.setAlgorithm(new u.default);break;case"fault_control":this.memory.setAlgorithm(new c.default);break;case"locality_model":throw new Error("Not implemented");case"compare_all":t=!0;break;default:alert("Invalid algorithm")}if(t){const e=[new r.default,new u.default,new c.default];this.memory.compareAllAndDisplayResults(e)}else if(e)this.animationGUI.startAnimation();else{const e=this.memory.simulate();this.memory.displayResults(e)}}}},920:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=class{constructor(e,t){this.last_call_time=0,this.id=e,this.process=t}call(e){this.last_call_time=e,this.process.done_calls++}}},950:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=class{constructor(e,t,s){this.page_faults=0,this.done_calls=0,this.calls=[],this.range_of_pages=e,this.number_of_calls=t,this.id=s}generateCalls(){this.calls=[];for(let e=0;e<this.number_of_calls;e++)this.calls.push(Math.floor(Math.random()*(this.range_of_pages[1]-this.range_of_pages[0]))+this.range_of_pages[0])}getCalls(){return this.calls}}},382:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=class{constructor(){this.name="Equal"}allocateFrames(e,t){const s=Math.floor(e.length/t.length);console.log(`Allocating ${s} frames per process`),console.log(`data.current_frames.length = ${e.length}, data.processes.length = ${t.length}`);for(let l=0;l<e.length;l++)null==e[l].process&&(e[l].process=t[Math.floor(l/s)])}}},960:function(e,t,s){var l=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=l(s(634));t.default=class{constructor(){this.name="Page Fault Control",this.run_proportional=!0}allocateFrames(e,t){if(this.run_proportional)return this.run_proportional=!1,(new n.default).allocateFrames(e,t);for(let s=0;s<t.length;s++){const l=t[s].page_faults/t[s].done_calls,n=e.filter((e=>e.process==t[s])).length;if(l<3&&n>1)for(let l=0;l<e.length;l++)if(e[l].process==t[s]){e[l].process=null;break}if(l>5)for(let l=0;l<e.length;l++)if(null==e[l].process){e[l].process=t[s];break}}}}},634:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=class{constructor(){this.name="Proportional"}allocateFrames(e,t){const s=t.reduce(((e,t)=>e+t.number_of_calls),0);let l=0;for(let n=0;n<t.length;n++){let a=Math.floor(t[n].number_of_calls/s*e.length)||1;for(let s=0;s<a;s++){if(l>=e.length){console.error("There are not enough frames to allocate all frames.");break}null==e[l].process&&(e[l].process=t[n],l++)}}}}},965:function(e,t,s){var l=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=l(s(268));"undefined"!=typeof document&&(new n.default).init()},617:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=class{constructor(){this.ctx=null,this.resizeCallback=null}init(e){const t=document.getElementById(e);this.ctx=t.getContext("2d"),window.addEventListener("resize",this.resizeToFit.bind(this)),this.resizeToFit()}resizeToFit(){null!=this.ctx&&(this.ctx.canvas.width=window.innerWidth,this.ctx.canvas.height=window.innerHeight,null!=this.resizeCallback&&this.resizeCallback())}setResizeCallback(e){this.resizeCallback=e}}}},t={};!function s(l){var n=t[l];if(void 0!==n)return n.exports;var a=t[l]={exports:{}};return e[l].call(a.exports,a,a.exports,s),a.exports}(965)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,