(()=>{"use strict";var e={994:function(e,t,s){var l=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const a=l(s(752)),n=l(s(920)),i=l(s(463));t.default=class{constructor(){this.processes=[],this.frames=[],this.call_pool=[],this.call_queue=[],this.call_history=[],this.number_of_frames=0,this.number_of_pages=0,this.allocationAlgorithm=null,this.replacementAlgorithm=new i.default,this.total_page_faults=0,this.time=0,this.last_call_caused_fault=!1}init(e,t){this.number_of_pages=null!=e?e:this.number_of_pages,this.number_of_frames=null!=t?t:this.number_of_frames,this.call_queue=[...this.call_pool],this.frames=[],this.call_history=[],this.time=0,this.total_page_faults=0;for(let e=0;e<this.number_of_frames;e++)this.frames.push(new a.default)}addProcess(e){this.processes.push(e)}clearProcesses(){this.processes=[]}generatePageCallPool(){for(let e=0;e<this.processes.length;e++)this.processes[e].generateCalls(),this.addPageCallsToPool(this.processes[e].getCalls(),this.processes[e])}addPageCallToPool(e){this.call_pool.push(e)}addPageCallsToPool(e,t){for(let s=0;s<e.length;s++)this.addPageCallToPool(new n.default(e[s],t))}clearPageCallPool(){this.call_pool=[]}setAlgorithm(e){this.allocationAlgorithm=e}nextTick(){var e,t,s,l,a,n;if(null==this.allocationAlgorithm)throw new Error("No algorithm selected");const i=this.call_queue.shift();if(null==i)return console.warn("Empty page call queue but not finished"),void this.time++;if(this.call_history.push(i),console.log("Page call: "+i.id),i){null===(t=(e=this.allocationAlgorithm).allocateFrames)||void 0===t||t.call(e,this.frames,this.processes);const o=this.frames.filter((e=>null==e.process)).length;o>0&&console.warn(`Not all frames are allocated\nAllocated: ${this.frames.length-o}\nUnallocated: ${o}`),null===(l=(s=this.replacementAlgorithm).onPageCall)||void 0===l||l.call(s,this.getCurrentStateData(i));let r=!0;for(let e=0;e<this.frames.length;e++){if(null==this.frames[e])throw new Error("Frame is null");if(null==this.frames[e].page&&this.frames[e].process==i.process){this.frames[e].page=i,this.total_page_faults++,i.process.page_faults++,this.last_call_caused_fault=!0,r=!1;break}if(null!=this.frames[e].page&&this.frames[e].page.id==i.id){null===(n=(a=this.replacementAlgorithm).onPageAlreadyInMemory)||void 0===n||n.call(a,this.getCurrentStateData(i)),this.last_call_caused_fault=!1,r=!1;break}}if(r){if(console.log("Page fault: "+i.id),null!=this.frames.find((e=>e.process==i.process&&null==e.page)))throw new Error("Initial page fill not handled properly");this.total_page_faults++,i.process.page_faults++,this.last_call_caused_fault=!0;const e=this.replacementAlgorithm.handlePageFault(this.getCurrentStateData(i));-1!=e&&(this.frames[this.getFrameIndexById(e)].page=i)}let h=!1;for(const e of this.frames)if(null!=e.page&&e.page.id==i.id){h=!0;break}if(!h)throw new Error("Page fault not handled properly - page not in memory");i.call(this.time)}this.time++}getCurrentStateData(e){const t=this.frames.filter((t=>t.process==e.process)),s=this.call_history.filter((t=>t.process==e.process));return{page_call:e,current_frames:t,previous_page_calls:s,processes:this.processes}}isFinished(){return 0==this.call_queue.length}getFrameIndexById(e){for(let t=0;t<this.frames.length;t++)if(this.frames[t].id==e)return t;return-1}getResults(){return{total_page_faults:this.total_page_faults,total_page_hits:this.call_history.length-this.total_page_faults,total_calls:this.call_history.length}}simulate(){for(this.init();!this.isFinished();)this.nextTick();return this.getResults()}displayResults(e,t=this.allocationAlgorithm.name){document.getElementById("results_wrapper").style.display="flex",document.getElementById("results").innerHTML=`\n        Algorithm: ${t.toUpperCase()}\n\n        Total page faults: <b style='color: red'>${e.total_page_faults.toFixed(0)}</b>\n        Total page hits: <b style='color: lime'>${e.total_page_hits.toFixed(0)}</b>\n        Total page calls: <b>${e.total_calls.toFixed(0)}</b>\n        `.replace(RegExp("\n","g"),"<br />")}compareAllAndDisplayResults(e){document.getElementById("results_wrapper").style.display="flex";const t=document.getElementById("results");t.innerHTML="";for(let s=0;s<e.length;s++){this.setAlgorithm(e[s]);const l=this.simulate();t.innerHTML+=`\n            Algorithm: ${e[s].name.toUpperCase()}\n            Total page faults: <b style='color: red'>${l.total_page_faults.toFixed(0)}</b>\n            Total page hits: <b style='color: lime'>${l.total_page_hits.toFixed(0)}</b>\n            Total page calls: <b>${l.total_calls.toFixed(0)}</b>\n            `.replace(RegExp("\n","g"),"<br />"),t.innerHTML+="<br />"}}}},498:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=class{constructor(e){this.visible=!1,this.playing=!1,this.speed=1,this.GUI=null,this.MENU=null,this.play_pause_button=null,this.step_button=null,this.stop_button=null,this.speed_slider=null,this.info_algorithm=null,this.info_time=null,this.info_is_done=null,this.info_in_queue=null,this.info_finished=null,this.info_total_page_faults=null,this.info_total_page_hits=null,this.frame_rows=[],this.see_code_button=null,this.storedSetInterval=null,this.menu=e}init(){this.GUI=document.getElementById("animation_gui"),this.MENU=document.getElementById("settings"),this.play_pause_button=document.getElementById("animation_play_pause"),this.step_button=document.getElementById("animation_step"),this.stop_button=document.getElementById("animation_stop"),this.speed_slider=document.getElementById("animation_speed_slider"),this.info_algorithm=document.getElementById("animation_info_algorithm_value"),this.info_time=document.getElementById("animation_info_time_value"),this.info_is_done=document.getElementById("animation_is_done"),this.info_in_queue=document.getElementById("calls_in_queue_value"),this.info_finished=document.getElementById("calls_finished_value"),this.info_total_page_faults=document.getElementById("total_page_faults_value"),this.info_total_page_hits=document.getElementById("total_page_hits_value"),this.see_code_button=document.getElementById("code_button"),this.info_is_done.style.display="none",this.play_pause_button.addEventListener("click",(()=>{this.togglePlaying()})),this.step_button.addEventListener("click",(()=>{this.step()})),this.stop_button.addEventListener("click",(()=>{this.toggleVisible(!1)})),this.speed_slider.addEventListener("input",(()=>{this.speed=parseInt(this.speed_slider.value),this.refreshSpeed()})),this.see_code_button.addEventListener("click",(()=>{if(null==this.menu.memory.allocationAlgorithm)return;const e=this.menu.memory.allocationAlgorithm.name;window.open(`https://github.com/brun0ne/scheduling-sim/blob/main/page_replacement_src/classes/algorithms/${e}.ts`,"_blank").focus()})),this.refreshSpeed(),this.initStateTable()}togglePlaying(e){this.playing=null==e?!this.playing:e,this.refreshSpeed(),this.play_pause_button.innerHTML=this.playing?"Pause":"Play"}toggleVisible(e){this.visible=null==e?!this.visible:e,this.visible?(this.GUI.style.display="block",this.MENU.style.display="none",this.menu.display.resizeCallback=()=>{this.drawCurrentState()},this.drawCurrentState()):(this.GUI.style.display="none",this.MENU.style.display="flex",null!=this.storedSetInterval&&clearInterval(this.storedSetInterval),this.menu.display.resizeCallback=()=>{this.menu.refreshCalls()},this.menu.refreshCalls())}reset(){if(null==this.play_pause_button||null==this.info_is_done||null==this.step_button)throw new Error("call init() first!");this.menu.memory.init(),this.play_pause_button.innerHTML="Play",this.playing=!1,this.info_is_done.style.display="none",this.play_pause_button.disabled=!1,this.step_button.disabled=!1,this.initStateTable()}startAnimation(){this.reset(),this.toggleVisible(!0)}drawCurrentState(){this.refreshInfo(),this.drawCalls()}initStateTable(){const e=document.getElementById("animation_table_time"),t=document.getElementById("animation_table_page_calls"),s=document.getElementById("animation_table_body");e.innerHTML="",t.innerHTML="";{const t=document.createElement("th");t.innerHTML="Time",t.classList.add("header"),e.appendChild(t)}{const e=document.createElement("th");e.innerHTML="Page calls",e.classList.add("header"),t.appendChild(e)}{for(;null!=s.lastChild&&"animation_table_page_calls"!=s.lastChild.id;)s.removeChild(s.lastChild);const e=[];for(let t=0;t<this.menu.memory.number_of_frames;t++){const l=document.createElement("tr"),a=document.createElement("th");a.innerHTML=`Frame ${t}`,l.appendChild(a),e.push(l),s.appendChild(l)}this.frame_rows=e}}drawCalls(e,t,s,l,a){const n=document.getElementById("animation_table_time"),i=document.getElementById("animation_table_page_calls"),o=this.menu.memory.call_history.at(-1);if(null==o)return;{const e=document.createElement("th");e.innerHTML=`${this.menu.memory.time}`,n.appendChild(e)}{const e=document.createElement("th");e.innerHTML=`${o.id}`,i.appendChild(e)}for(let e=0;e<this.menu.memory.number_of_frames;e++){const t=this.frame_rows[e],s=this.menu.memory.frames[e].page,l=document.createElement("th");l.innerHTML=`${null!=s?s.id:""}`,null!=s&&s.id==o.id&&this.menu.memory.last_call_caused_fault&&(l.style.backgroundColor="red"),null!=this.menu.memory.frames[e].process&&(l.innerHTML+=` <span style='color: yellow'>(${this.menu.memory.frames[e].process.id})</span>`),t.appendChild(l)}const r=document.getElementById("animation_call_table");r.scrollLeft=r.scrollWidth}refreshInfo(){const e=this.menu.memory;if(null==e.allocationAlgorithm)throw new Error("call startAnimation() first!");this.info_algorithm.innerHTML=e.allocationAlgorithm.name,this.info_time.innerHTML=e.time.toString(),e.isFinished()?this.info_is_done.style.display="block":this.info_is_done.style.display="none",this.info_total_page_hits.innerHTML=(e.call_history.length-e.total_page_faults).toString(),this.info_total_page_faults.innerHTML=e.total_page_faults.toString(),this.info_in_queue.innerHTML=e.call_queue.length.toString(),this.info_finished.innerHTML=e.call_history.length.toString()}refreshSpeed(){null!=this.storedSetInterval&&clearInterval(this.storedSetInterval),this.storedSetInterval=setInterval((()=>{this.playing&&this.step()}).bind(this),1e3/this.speed)}step(){this.menu.memory.isFinished()||(this.menu.memory.nextTick(),this.drawCurrentState(),this.menu.memory.isFinished()&&(this.togglePlaying(!1),this.menu.memory.displayResults(this.menu.memory.getResults()),this.afterDone()))}afterDone(){if(null==this.info_is_done||null==this.play_pause_button||null==this.step_button)throw new Error("call init() first!");this.info_is_done.style.display="block",this.play_pause_button.disabled=!0,this.step_button.disabled=!0}}},752:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0});class s{constructor(){this.page=null,this.process=null,this.id=s.next_id++}}s.next_id=0,t.default=s},463:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=class{constructor(){this.name="LRU"}handlePageFault(e){let t=-1,s=-1;for(let l=0;l<e.current_frames.length;l++){const a=e.current_frames[l];if(a.process!=e.page_call.process&&console.error("Frame is assigned to a different process - this should be ensured not to happen by the caller"),null==a.page)return console.warn("Frame is empty - this should be ensured not to happen by the caller"),l;let n=-1;for(let t=e.previous_page_calls.length-1;t>=0;t--)if(e.previous_page_calls[t].id==a.page.id){n=t;break}if(-1==n)return l;(n<s||-1==s)&&(t=l,s=n)}return-1==t?(console.warn("No frame to replace found by LRU"),-1):e.current_frames[t].id}}},268:function(e,t,s){var l=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const a=l(s(617)),n=l(s(994)),i=l(s(950)),o=l(s(920)),r=l(s(382)),h=l(s(498)),u=l(s(634)),c=l(s(960)),m=l(s(728));t.default=class{constructor(){this.display=new a.default,this.memory=new n.default,this.animationGUI=new h.default(this)}init(){document.getElementById("run_button").addEventListener("click",(()=>{this.run()})),document.getElementById("run_with_animation_button").addEventListener("click",(()=>{this.run(!0)})),document.getElementById("add_button").addEventListener("click",(()=>{this.addProcesses()})),document.getElementById("clear_button").addEventListener("click",(()=>{this.clearProcesses()})),document.getElementById("generate_call_queue_button").addEventListener("click",(()=>{this.addCalls()})),document.getElementById("clear_call_queue_button").addEventListener("click",(()=>{this.clearCalls()})),this.memory.init(5,3),this.display.init("main_canvas"),this.animationGUI.init(),this.display.setResizeCallback((()=>{this.refreshCalls()})),document.getElementById("s_frame_count").addEventListener("change",(e=>{const t=parseInt(e.target.value);isNaN(t)||t<1?alert("Invalid number of frames"):(this.memory.init(this.memory.number_of_pages,t),this.refreshCalls())})),document.getElementById("a_type").addEventListener("change",(e=>{"compare_all"===e.target.value.toLowerCase()?document.getElementById("run_with_animation_button").setAttribute("disabled","true"):document.getElementById("run_with_animation_button").removeAttribute("disabled"),"fault_control"===e.target.value.toLowerCase()||"compare_all"===e.target.value.toLowerCase()?(document.getElementById("s_min_page_faults_all").style.display="block",document.getElementById("s_max_page_faults_all").style.display="block"):(document.getElementById("s_min_page_faults_all").style.display="none",document.getElementById("s_max_page_faults_all").style.display="none")})),document.getElementById("results_close").addEventListener("click",(()=>{document.getElementById("results_wrapper").style.display="none"})),this.refreshCalls()}addProcesses(){const e=parseInt(document.getElementById("c_count").value),t=parseInt(document.getElementById("s_min_range").value),s=parseInt(document.getElementById("s_max_range").value),l=parseInt(document.getElementById("s_min_calls").value),a=parseInt(document.getElementById("s_max_calls").value);let n=0;for(let o=0;o<e;o++){const e=Math.floor(Math.random()*(s-t+1))+t;this.memory.addProcess(new i.default([n,n+e],Math.floor(Math.random()*(a-l+1))+l,o)),this.memory.processes[this.memory.processes.length-1].generateCalls(),n+=e}this.refreshCalls()}clearProcesses(){this.memory.clearProcesses(),this.refreshCalls()}addCalls(){for(let e=0;e<this.memory.processes.length;e++)for(let t=0;t<this.memory.processes[e].getCalls().length;t++)this.memory.call_pool.push(new o.default(this.memory.processes[e].getCalls()[t],this.memory.processes[e]));this.memory.call_pool.sort((()=>Math.random()-.5)),this.refreshCalls()}clearCalls(){this.memory.call_pool=[],this.refreshCalls()}refreshCalls(){document.getElementById("p_current_count").innerHTML=`(${this.memory.processes.length.toString()})`;const e=document.getElementById("generate_call_queue_button");this.memory.processes.length>0&&0==this.memory.call_pool.length?e.removeAttribute("disabled"):e.attributes.setNamedItem(document.createAttribute("disabled"));const t=document.getElementById("all_processes");t.innerHTML="";for(let e=0;e<this.memory.processes.length;e++){const s=this.memory.processes[e],l=document.createElement("span");l.classList.add("process"),l.innerHTML=`<span class="process_name">Calls of process ${e}: </span> <span class="process_calls">${s.getCalls().join(", ")}</span><br />`,t.appendChild(l)}0==this.memory.processes.length&&(t.innerHTML="<span style='color: yellow'>No processes added yet.</span>"),document.getElementById("current_call_count").innerHTML=`(${this.memory.call_pool.length.toString()})`;const s=document.getElementById("main_call_queue");s.innerHTML=this.memory.call_pool.map((e=>e.id)).join(", "),0==this.memory.call_pool.length&&(s.innerHTML="<span style='color: yellow'>No calls in queue.</span>")}run(e){if(this.memory.processes.length>this.memory.frames.length)return void alert("Not enough frames for all processes");let t=!1;switch(document.getElementById("a_type").value.toLowerCase()){case"equal":this.memory.setAlgorithm(new r.default);break;case"proportional":this.memory.setAlgorithm(new u.default);break;case"fault_control":{const e=parseFloat(document.getElementById("s_min_page_faults").value),t=parseFloat(document.getElementById("s_max_page_faults").value);if(e>=t)return void alert("Minimum frequency has to be smaller than the maximum");this.memory.setAlgorithm(new c.default(e,t));break}case"locality_model":this.memory.setAlgorithm(new m.default);break;case"compare_all":t=!0;break;default:alert("Invalid algorithm")}if(t){const e=parseFloat(document.getElementById("s_min_page_faults").value),t=parseFloat(document.getElementById("s_max_page_faults").value);if(e>=t)return void alert("Minimum frequency has to be smaller than the maximum");const s=[new r.default,new u.default,new c.default(e,t)];this.memory.compareAllAndDisplayResults(s)}else if(e)this.animationGUI.startAnimation();else{const e=this.memory.simulate();this.memory.displayResults(e)}}}},920:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=class{constructor(e,t){this.last_call_time=0,this.id=e,this.process=t}call(e){this.last_call_time=e,this.process.done_calls++}}},950:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=class{constructor(e,t,s){this.page_faults=0,this.done_calls=0,this.calls=[],this.range_of_pages=e,this.number_of_calls=t,this.id=s}generateCalls(){this.calls=[];for(let e=0;e<this.number_of_calls;e++)this.calls.push(Math.floor(Math.random()*(this.range_of_pages[1]-this.range_of_pages[0]))+this.range_of_pages[0])}getCalls(){return this.calls}}},382:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=class{constructor(){this.name="Equal"}allocateFrames(e,t){const s=Math.floor(e.length/t.length);console.log(`Allocating ${s} frames per process`),console.log(`data.current_frames.length = ${e.length}, data.processes.length = ${t.length}`);for(let l=0;l<e.length;l++)null==e[l].process&&(e[l].process=t[Math.floor(l/s)])}}},728:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=class{constructor(){this.name="LocalityModel"}allocateFrames(e,t){throw new Error("Method not implemented.")}}},960:function(e,t,s){var l=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const a=l(s(634));t.default=class{constructor(e,t){this.name="PageFaultControl",this.run_proportional=!0,this.min_fault_freq=e,this.max_faults_freq=t}allocateFrames(e,t){if(this.run_proportional)return this.run_proportional=!1,(new a.default).allocateFrames(e,t);const s=this.min_fault_freq,l=this.max_faults_freq;for(let a=0;a<t.length;a++){const n=t[a].page_faults/t[a].done_calls,i=e.filter((e=>e.process==t[a])).length;if(n<s&&i>1)for(let s=0;s<e.length;s++)if(e[s].process==t[a]){e[s].process=null;break}if(n>l)for(let s=0;s<e.length;s++)if(null==e[s].process){e[s].process=t[a];break}}}}},634:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=class{constructor(){this.name="Proportional"}allocateFrames(e,t){const s=t.reduce(((e,t)=>e+t.number_of_calls),0);let l=0;for(let a=0;a<t.length;a++){let n=Math.floor(t[a].number_of_calls/s*e.length)||1;for(let s=0;s<n;s++){if(l>=e.length){console.error("There are not enough frames to allocate all frames.");break}null==e[l].process&&(e[l].process=t[a],l++)}}}}},965:function(e,t,s){var l=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const a=l(s(268));"undefined"!=typeof document&&(new a.default).init()},617:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=class{constructor(){this.ctx=null,this.resizeCallback=null}init(e){const t=document.getElementById(e);this.ctx=t.getContext("2d"),window.addEventListener("resize",this.resizeToFit.bind(this)),this.resizeToFit()}resizeToFit(){null!=this.ctx&&(this.ctx.canvas.width=window.innerWidth,this.ctx.canvas.height=window.innerHeight,null!=this.resizeCallback&&this.resizeCallback())}setResizeCallback(e){this.resizeCallback=e}}}},t={};!function s(l){var a=t[l];if(void 0!==a)return a.exports;var n=t[l]={exports:{}};return e[l].call(n.exports,n,n.exports,s),n.exports}(965)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QVNDLEVBQVFBLEVBQU9ELFFBQVNKLEdBR3BFSyxFQUFPRCxPQUNmLENDbkIwQkosQ0FBb0IsSSIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL2NsYXNzZXMvQWxsb2NhdGluZ01NVS50cyIsIndlYnBhY2s6Ly8vLi9jbGFzc2VzL0FuaW1hdGlvbkdVSS50cyIsIndlYnBhY2s6Ly8vLi9jbGFzc2VzL0ZyYW1lLnRzIiwid2VicGFjazovLy8uL2NsYXNzZXMvTFJVLnRzIiwid2VicGFjazovLy8uL2NsYXNzZXMvTWVudS50cyIsIndlYnBhY2s6Ly8vLi9jbGFzc2VzL1BhZ2UudHMiLCJ3ZWJwYWNrOi8vLy4vY2xhc3Nlcy9Qcm9jZXNzLnRzIiwid2VicGFjazovLy8uL2NsYXNzZXMvYWxnb3JpdGhtcy9FcXVhbC50cyIsIndlYnBhY2s6Ly8vLi9jbGFzc2VzL2FsZ29yaXRobXMvTG9jYWxpdHlNb2RlbC50cyIsIndlYnBhY2s6Ly8vLi9jbGFzc2VzL2FsZ29yaXRobXMvUGFnZUZhdWx0Q29udHJvbC50cyIsIndlYnBhY2s6Ly8vLi9jbGFzc2VzL2FsZ29yaXRobXMvUHJvcG9ydGlvbmFsLnRzIiwid2VicGFjazovLy8uL21haW4udHMiLCJ3ZWJwYWNrOi8vLy4uL3NoYXJlZC9jbGFzc2VzL0Rpc3BsYXkudHMiLCJ3ZWJwYWNrOi8vL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovLy93ZWJwYWNrL3N0YXJ0dXAiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEFsbG9jYXRpb25BbGdvcml0aG0gZnJvbSBcIi4vQWxsb2NhdGlvbkFsZ29yaXRobVwiXHJcblxyXG5pbXBvcnQgRnJhbWUgZnJvbSBcIi4vRnJhbWVcIlxyXG5pbXBvcnQgUGFnZSBmcm9tIFwiLi9QYWdlXCJcclxuaW1wb3J0IFByb2Nlc3MgZnJvbSBcIi4vUHJvY2Vzc1wiXHJcblxyXG5pbXBvcnQgUmVwbGFjZW1lbnRBbGdvcml0aG0gZnJvbSBcIi4vUmVwbGFjZW1lbnRBbGdvcml0aG1cIlxyXG5pbXBvcnQgTFJVIGZyb20gXCIuL0xSVVwiXHJcblxyXG5leHBvcnQgdHlwZSBNZW1vcnlTdGF0ZURhdGEgPSB7XHJcbiAgICBwYWdlX2NhbGw6IFJlYWRvbmx5PFBhZ2U+LFxyXG4gICAgY3VycmVudF9mcmFtZXM6IFJlYWRvbmx5QXJyYXk8UmVhZG9ubHk8RnJhbWU+PixcclxuICAgIHByZXZpb3VzX3BhZ2VfY2FsbHM6IFJlYWRvbmx5QXJyYXk8UmVhZG9ubHk8UGFnZT4+LFxyXG4gICAgcHJvY2Vzc2VzOiBSZWFkb25seUFycmF5PFJlYWRvbmx5PFByb2Nlc3M+PlxyXG59O1xyXG5cclxuZXhwb3J0IHR5cGUgUmVzdWx0cyA9IHtcclxuICAgIHRvdGFsX3BhZ2VfZmF1bHRzOiBudW1iZXIsXHJcbiAgICB0b3RhbF9wYWdlX2hpdHM6IG51bWJlcixcclxuICAgIHRvdGFsX2NhbGxzOiBudW1iZXJcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEFsbG9jYXRpbmdNTVUge1xyXG4gICAgcHJvY2Vzc2VzOiBBcnJheTxQcm9jZXNzPiA9IFtdXHJcbiAgICBmcmFtZXM6IEFycmF5PEZyYW1lPiA9IFtdXHJcblxyXG4gICAgY2FsbF9wb29sOiBBcnJheTxQYWdlPiA9IFtdXHJcbiAgICBjYWxsX3F1ZXVlOiBBcnJheTxQYWdlPiA9IFtdXHJcbiAgICBjYWxsX2hpc3Rvcnk6IEFycmF5PFBhZ2U+ID0gW11cclxuXHJcbiAgICBudW1iZXJfb2ZfZnJhbWVzOiBudW1iZXIgPSAwXHJcbiAgICBudW1iZXJfb2ZfcGFnZXM6IG51bWJlciA9IDBcclxuXHJcbiAgICBhbGxvY2F0aW9uQWxnb3JpdGhtOiBBbGxvY2F0aW9uQWxnb3JpdGhtIHwgbnVsbCA9IG51bGxcclxuICAgIHJlcGxhY2VtZW50QWxnb3JpdGhtOiBSZXBsYWNlbWVudEFsZ29yaXRobSA9IG5ldyBMUlUoKVxyXG5cclxuICAgIHRvdGFsX3BhZ2VfZmF1bHRzOiBudW1iZXIgPSAwXHJcbiAgICB0aW1lOiBudW1iZXIgPSAwXHJcblxyXG4gICAgbGFzdF9jYWxsX2NhdXNlZF9mYXVsdDogYm9vbGVhbiA9IGZhbHNlXHJcblxyXG4gICAgY29uc3RydWN0b3IoKSB7IH1cclxuXHJcbiAgICBpbml0KG51bWJlcl9vZl9wYWdlcz86IG51bWJlciwgbnVtYmVyX29mX2ZyYW1lcz86IG51bWJlcik6IHZvaWQge1xyXG4gICAgICAgIHRoaXMubnVtYmVyX29mX3BhZ2VzID0gbnVtYmVyX29mX3BhZ2VzID8/IHRoaXMubnVtYmVyX29mX3BhZ2VzO1xyXG4gICAgICAgIHRoaXMubnVtYmVyX29mX2ZyYW1lcyA9IG51bWJlcl9vZl9mcmFtZXMgPz8gdGhpcy5udW1iZXJfb2ZfZnJhbWVzO1xyXG5cclxuICAgICAgICB0aGlzLmNhbGxfcXVldWUgPSBbLi4udGhpcy5jYWxsX3Bvb2xdOyAvLyBjb3B5IGFycmF5XHJcbiAgICAgICAgdGhpcy5mcmFtZXMgPSBbXTtcclxuICAgICAgICB0aGlzLmNhbGxfaGlzdG9yeSA9IFtdO1xyXG5cclxuICAgICAgICB0aGlzLnRpbWUgPSAwO1xyXG4gICAgICAgIHRoaXMudG90YWxfcGFnZV9mYXVsdHMgPSAwO1xyXG5cclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMubnVtYmVyX29mX2ZyYW1lczsgaSsrKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZnJhbWVzLnB1c2gobmV3IEZyYW1lKCkpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBhZGRQcm9jZXNzKHByb2Nlc3M6IFByb2Nlc3MpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLnByb2Nlc3Nlcy5wdXNoKHByb2Nlc3MpO1xyXG4gICAgfVxyXG5cclxuICAgIGNsZWFyUHJvY2Vzc2VzKCk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMucHJvY2Vzc2VzID0gW107XHJcbiAgICB9XHJcblxyXG4gICAgZ2VuZXJhdGVQYWdlQ2FsbFBvb2woKTogdm9pZCB7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnByb2Nlc3Nlcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICB0aGlzLnByb2Nlc3Nlc1tpXS5nZW5lcmF0ZUNhbGxzKCk7XHJcbiAgICAgICAgICAgIHRoaXMuYWRkUGFnZUNhbGxzVG9Qb29sKHRoaXMucHJvY2Vzc2VzW2ldLmdldENhbGxzKCksIHRoaXMucHJvY2Vzc2VzW2ldKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBhZGRQYWdlQ2FsbFRvUG9vbChwYWdlX2NhbGw6IFBhZ2UpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLmNhbGxfcG9vbC5wdXNoKHBhZ2VfY2FsbCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBhZGRQYWdlQ2FsbHNUb1Bvb2wocGFnZV9jYWxsczogQXJyYXk8bnVtYmVyPiwgcHJvY2VzczogUHJvY2Vzcykge1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcGFnZV9jYWxscy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICB0aGlzLmFkZFBhZ2VDYWxsVG9Qb29sKG5ldyBQYWdlKHBhZ2VfY2FsbHNbaV0sIHByb2Nlc3MpKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgY2xlYXJQYWdlQ2FsbFBvb2woKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5jYWxsX3Bvb2wgPSBbXTtcclxuICAgIH1cclxuXHJcbiAgICBzZXRBbGdvcml0aG0oYWxnb3JpdGhtOiBBbGxvY2F0aW9uQWxnb3JpdGhtKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5hbGxvY2F0aW9uQWxnb3JpdGhtID0gYWxnb3JpdGhtO1xyXG4gICAgfVxyXG5cclxuICAgIG5leHRUaWNrKCk6IHZvaWQge1xyXG4gICAgICAgIC8qIGVuc3VyZSB0aGF0IGFuIGFsZ29yaXRobSBpcyBzZWxlY3RlZCAqL1xyXG4gICAgICAgIGlmICh0aGlzLmFsbG9jYXRpb25BbGdvcml0aG0gPT0gbnVsbCkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJObyBhbGdvcml0aG0gc2VsZWN0ZWRcIik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCBwYWdlX2NhbGwgPSB0aGlzLmNhbGxfcXVldWUuc2hpZnQoKTtcclxuXHJcbiAgICAgICAgLyogbm8gcGFnZSBjYWxsIGF0IHRoaXMgdGltZSAqL1xyXG4gICAgICAgIGlmIChwYWdlX2NhbGwgPT0gbnVsbCkge1xyXG4gICAgICAgICAgICBjb25zb2xlLndhcm4oXCJFbXB0eSBwYWdlIGNhbGwgcXVldWUgYnV0IG5vdCBmaW5pc2hlZFwiKTtcclxuICAgICAgICAgICAgdGhpcy50aW1lKys7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuY2FsbF9oaXN0b3J5LnB1c2gocGFnZV9jYWxsKTtcclxuICAgICAgICBjb25zb2xlLmxvZyhcIlBhZ2UgY2FsbDogXCIgKyBwYWdlX2NhbGwuaWQpO1xyXG5cclxuICAgICAgICBpZiAocGFnZV9jYWxsKSB7XHJcbiAgICAgICAgICAgIC8qIGFsbG9jYXRlIGZyYW1lcyB0byBwcm9jZXNzZXMgKi9cclxuICAgICAgICAgICAgdGhpcy5hbGxvY2F0aW9uQWxnb3JpdGhtLmFsbG9jYXRlRnJhbWVzPy4odGhpcy5mcmFtZXMsIHRoaXMucHJvY2Vzc2VzKTtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IHVuYWxsb2NhdGVkRnJhbWVzTGVuZ3RoID0gdGhpcy5mcmFtZXMuZmlsdGVyKGZyYW1lID0+IGZyYW1lLnByb2Nlc3MgPT0gbnVsbCkubGVuZ3RoO1xyXG4gICAgICAgICAgICBpZiAodW5hbGxvY2F0ZWRGcmFtZXNMZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oYE5vdCBhbGwgZnJhbWVzIGFyZSBhbGxvY2F0ZWRcXG5BbGxvY2F0ZWQ6ICR7dGhpcy5mcmFtZXMubGVuZ3RoIC0gdW5hbGxvY2F0ZWRGcmFtZXNMZW5ndGh9XFxuVW5hbGxvY2F0ZWQ6ICR7dW5hbGxvY2F0ZWRGcmFtZXNMZW5ndGh9YCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8qIGV4ZWN1dGUgcmVwbGFjZW1lbnQgYWxnb3JpdGhtICovXHJcbiAgICAgICAgICAgIHRoaXMucmVwbGFjZW1lbnRBbGdvcml0aG0ub25QYWdlQ2FsbD8uKHRoaXMuZ2V0Q3VycmVudFN0YXRlRGF0YShwYWdlX2NhbGwpKTtcclxuXHJcbiAgICAgICAgICAgIC8qIGNoZWNrIGlmIHRoZXJlIGlzIGEgcGFnZSBmYXVsdCAqL1xyXG4gICAgICAgICAgICBsZXQgcGFnZV9mYXVsdCA9IHRydWU7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5mcmFtZXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmZyYW1lc1tpXSA9PSBudWxsKVxyXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkZyYW1lIGlzIG51bGxcIik7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuZnJhbWVzW2ldLnBhZ2UgPT0gbnVsbCAmJiB0aGlzLmZyYW1lc1tpXS5wcm9jZXNzID09IHBhZ2VfY2FsbC5wcm9jZXNzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLyogaW5zZXJ0IGludG8gdGhlIGZpcnN0IGZyZWUgZnJhbWUgYXNzaWduZWQgdG8gdGhlIHByb2Nlc3MgKi9cclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmZyYW1lc1tpXS5wYWdlID0gcGFnZV9jYWxsO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAvKiBpbmNyZW1lbnQgcGFnZSBmYXVsdHMgKi9cclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnRvdGFsX3BhZ2VfZmF1bHRzKys7XHJcbiAgICAgICAgICAgICAgICAgICAgcGFnZV9jYWxsLnByb2Nlc3MucGFnZV9mYXVsdHMrKztcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5sYXN0X2NhbGxfY2F1c2VkX2ZhdWx0ID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgcGFnZV9mYXVsdCA9IGZhbHNlOyAvLyBwYWdlIGZhdWx0IGFscmVhZHkgaGFuZGxlZFxyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmZyYW1lc1tpXS5wYWdlICE9IG51bGwgJiYgdGhpcy5mcmFtZXNbaV0ucGFnZSEuaWQgPT0gcGFnZV9jYWxsLmlkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLyogcGFnZSBpcyBhbHJlYWR5IGluIG1lbW9yeSAqL1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmVwbGFjZW1lbnRBbGdvcml0aG0ub25QYWdlQWxyZWFkeUluTWVtb3J5Py4odGhpcy5nZXRDdXJyZW50U3RhdGVEYXRhKHBhZ2VfY2FsbCkpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmxhc3RfY2FsbF9jYXVzZWRfZmF1bHQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICBwYWdlX2ZhdWx0ID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8qIGhhbmRsZSBwYWdlIGZhdWx0ICovXHJcbiAgICAgICAgICAgIGlmIChwYWdlX2ZhdWx0KSB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIlBhZ2UgZmF1bHQ6IFwiICsgcGFnZV9jYWxsLmlkKTtcclxuXHJcbiAgICAgICAgICAgICAgICAvKiBlbnN1cmUgdGhhdCB0aGVyZSBhcmUgbm8gZnJlZSBmcmFtZXMgYXNzaWduZWQgdG8gdGhlIHByb2Nlc3MgKi9cclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmZyYW1lcy5maW5kKGZyYW1lID0+IGZyYW1lLnByb2Nlc3MgPT0gcGFnZV9jYWxsLnByb2Nlc3MgJiYgZnJhbWUucGFnZSA9PSBudWxsKSAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSW5pdGlhbCBwYWdlIGZpbGwgbm90IGhhbmRsZWQgcHJvcGVybHlcIik7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgLyogaW5jcmVtZW50IHBhZ2UgZmF1bHRzICovXHJcbiAgICAgICAgICAgICAgICB0aGlzLnRvdGFsX3BhZ2VfZmF1bHRzKys7XHJcbiAgICAgICAgICAgICAgICBwYWdlX2NhbGwucHJvY2Vzcy5wYWdlX2ZhdWx0cysrO1xyXG5cclxuICAgICAgICAgICAgICAgIHRoaXMubGFzdF9jYWxsX2NhdXNlZF9mYXVsdCA9IHRydWU7XHJcblxyXG4gICAgICAgICAgICAgICAgLyogcmVwbGFjZSBhIHBhZ2UgKi9cclxuICAgICAgICAgICAgICAgIGNvbnN0IGlkX29mX2ZyYW1lX3RvX3JlcGxhY2UgPSB0aGlzLnJlcGxhY2VtZW50QWxnb3JpdGhtLmhhbmRsZVBhZ2VGYXVsdCh0aGlzLmdldEN1cnJlbnRTdGF0ZURhdGEocGFnZV9jYWxsKSk7XHJcbiAgICAgICAgICAgICAgICBpZiAoaWRfb2ZfZnJhbWVfdG9fcmVwbGFjZSAhPSAtMSlcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmZyYW1lc1t0aGlzLmdldEZyYW1lSW5kZXhCeUlkKGlkX29mX2ZyYW1lX3RvX3JlcGxhY2UpXS5wYWdlID0gcGFnZV9jYWxsO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvKiBlbnN1cmUgdGhhdCB0aGUgcGFnZSBpcyBub3cgaW4gbWVtb3J5ICovXHJcbiAgICAgICAgICAgIGxldCBwYWdlX2luX21lbW9yeSA9IGZhbHNlO1xyXG4gICAgICAgICAgICBmb3IgKGNvbnN0IGZyYW1lIG9mIHRoaXMuZnJhbWVzKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZnJhbWUucGFnZSA9PSBudWxsKVxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmICgoPFBhZ2U+ZnJhbWUucGFnZSkuaWQgPT0gcGFnZV9jYWxsLmlkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLyogcGFnZSBpcyBpbiBtZW1vcnkgKi9cclxuICAgICAgICAgICAgICAgICAgICBwYWdlX2luX21lbW9yeSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKCFwYWdlX2luX21lbW9yeSkge1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiUGFnZSBmYXVsdCBub3QgaGFuZGxlZCBwcm9wZXJseSAtIHBhZ2Ugbm90IGluIG1lbW9yeVwiKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLyogY2FsbCB0aGUgcGFnZSAqL1xyXG4gICAgICAgICAgICBwYWdlX2NhbGwuY2FsbCh0aGlzLnRpbWUpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy50aW1lKys7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0Q3VycmVudFN0YXRlRGF0YShwYWdlX2NhbGw6IFBhZ2UpOiBNZW1vcnlTdGF0ZURhdGEge1xyXG4gICAgICAgIC8qIGdldCB0aGUgc3RhdGUgb2YgdGhlIG1lbW9yeSBhc3NpZ25lZCB0byB0aGUgcHJvY2VzcyAqL1xyXG4gICAgICAgIGNvbnN0IHByb2Nlc3NfZnJhbWVzID0gdGhpcy5mcmFtZXMuZmlsdGVyKGZyYW1lID0+IGZyYW1lLnByb2Nlc3MgPT0gcGFnZV9jYWxsLnByb2Nlc3MpO1xyXG4gICAgICAgIGNvbnN0IHByb2Nlc3NfY2FsbF9oaXN0b3J5ID0gdGhpcy5jYWxsX2hpc3RvcnkuZmlsdGVyKGNhbGwgPT4gY2FsbC5wcm9jZXNzID09IHBhZ2VfY2FsbC5wcm9jZXNzKTtcclxuXHJcbiAgICAgICAgY29uc3QgZGF0YTogTWVtb3J5U3RhdGVEYXRhID0ge1xyXG4gICAgICAgICAgICBwYWdlX2NhbGw6IHBhZ2VfY2FsbCxcclxuICAgICAgICAgICAgY3VycmVudF9mcmFtZXM6IHByb2Nlc3NfZnJhbWVzLFxyXG4gICAgICAgICAgICBwcmV2aW91c19wYWdlX2NhbGxzOiBwcm9jZXNzX2NhbGxfaGlzdG9yeSxcclxuICAgICAgICAgICAgcHJvY2Vzc2VzOiB0aGlzLnByb2Nlc3Nlc1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHJldHVybiBkYXRhO1xyXG4gICAgfVxyXG5cclxuICAgIGlzRmluaXNoZWQoKTogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuY2FsbF9xdWV1ZS5sZW5ndGggPT0gMDtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGdldEZyYW1lSW5kZXhCeUlkKGlkOiBudW1iZXIpOiBudW1iZXIge1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5mcmFtZXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuZnJhbWVzW2ldLmlkID09IGlkKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gLTE7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0UmVzdWx0cygpOiBSZXN1bHRzIHtcclxuICAgICAgICBjb25zdCByZXN1bHRzID0ge1xyXG4gICAgICAgICAgICB0b3RhbF9wYWdlX2ZhdWx0czogdGhpcy50b3RhbF9wYWdlX2ZhdWx0cyxcclxuICAgICAgICAgICAgdG90YWxfcGFnZV9oaXRzOiB0aGlzLmNhbGxfaGlzdG9yeS5sZW5ndGggLSB0aGlzLnRvdGFsX3BhZ2VfZmF1bHRzLFxyXG4gICAgICAgICAgICB0b3RhbF9jYWxsczogdGhpcy5jYWxsX2hpc3RvcnkubGVuZ3RoXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gcmVzdWx0cztcclxuICAgIH1cclxuXHJcbiAgICBzaW11bGF0ZSgpOiBSZXN1bHRzIHtcclxuICAgICAgICB0aGlzLmluaXQoKTtcclxuXHJcbiAgICAgICAgd2hpbGUgKCF0aGlzLmlzRmluaXNoZWQoKSkge1xyXG4gICAgICAgICAgICB0aGlzLm5leHRUaWNrKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gdGhpcy5nZXRSZXN1bHRzKCk7XHJcbiAgICB9XHJcblxyXG4gICAgZGlzcGxheVJlc3VsdHMocmVzdWx0cz86IFJlc3VsdHMsIGFsZ1N0cjogc3RyaW5nID0gdGhpcy5hbGxvY2F0aW9uQWxnb3JpdGhtIS5uYW1lKTogdm9pZCB7XHJcbiAgICAgICAgY29uc3QgcmVzdWx0c193cmFwcGVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJyZXN1bHRzX3dyYXBwZXJcIikgYXMgSFRNTEVsZW1lbnQ7XHJcbiAgICAgICAgcmVzdWx0c193cmFwcGVyLnN0eWxlLmRpc3BsYXkgPSBcImZsZXhcIjtcclxuXHJcbiAgICAgICAgY29uc3QgcmVzdWx0c19lbCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwicmVzdWx0c1wiKSBhcyBIVE1MRWxlbWVudDtcclxuICAgICAgICByZXN1bHRzX2VsLmlubmVySFRNTCA9IGBcclxuICAgICAgICBBbGdvcml0aG06ICR7YWxnU3RyLnRvVXBwZXJDYXNlKCl9XHJcblxyXG4gICAgICAgIFRvdGFsIHBhZ2UgZmF1bHRzOiA8YiBzdHlsZT0nY29sb3I6IHJlZCc+JHtyZXN1bHRzIS50b3RhbF9wYWdlX2ZhdWx0cy50b0ZpeGVkKDApfTwvYj5cclxuICAgICAgICBUb3RhbCBwYWdlIGhpdHM6IDxiIHN0eWxlPSdjb2xvcjogbGltZSc+JHtyZXN1bHRzIS50b3RhbF9wYWdlX2hpdHMudG9GaXhlZCgwKX08L2I+XHJcbiAgICAgICAgVG90YWwgcGFnZSBjYWxsczogPGI+JHtyZXN1bHRzIS50b3RhbF9jYWxscy50b0ZpeGVkKDApfTwvYj5cclxuICAgICAgICBgLnJlcGxhY2UoUmVnRXhwKFwiXFxuXCIsIFwiZ1wiKSwgXCI8YnIgLz5cIik7XHJcbiAgICB9XHJcblxyXG4gICAgY29tcGFyZUFsbEFuZERpc3BsYXlSZXN1bHRzKGFsZ29yaXRobXM6IEFycmF5PEFsbG9jYXRpb25BbGdvcml0aG0+KTogdm9pZCB7XHJcbiAgICAgICAgY29uc3QgcmVzdWx0c193cmFwcGVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJyZXN1bHRzX3dyYXBwZXJcIikgYXMgSFRNTEVsZW1lbnQ7XHJcbiAgICAgICAgcmVzdWx0c193cmFwcGVyLnN0eWxlLmRpc3BsYXkgPSBcImZsZXhcIjtcclxuXHJcbiAgICAgICAgY29uc3QgcmVzdWx0c19lbCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwicmVzdWx0c1wiKSBhcyBIVE1MRWxlbWVudDtcclxuICAgICAgICByZXN1bHRzX2VsLmlubmVySFRNTCA9IFwiXCI7XHJcblxyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYWxnb3JpdGhtcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICB0aGlzLnNldEFsZ29yaXRobShhbGdvcml0aG1zW2ldKTtcclxuICAgICAgICAgICAgY29uc3QgcmVzdWx0czogUmVzdWx0cyA9IHRoaXMuc2ltdWxhdGUoKTtcclxuXHJcbiAgICAgICAgICAgIHJlc3VsdHNfZWwuaW5uZXJIVE1MICs9IGBcclxuICAgICAgICAgICAgQWxnb3JpdGhtOiAke2FsZ29yaXRobXNbaV0ubmFtZS50b1VwcGVyQ2FzZSgpfVxyXG4gICAgICAgICAgICBUb3RhbCBwYWdlIGZhdWx0czogPGIgc3R5bGU9J2NvbG9yOiByZWQnPiR7cmVzdWx0cy50b3RhbF9wYWdlX2ZhdWx0cy50b0ZpeGVkKDApfTwvYj5cclxuICAgICAgICAgICAgVG90YWwgcGFnZSBoaXRzOiA8YiBzdHlsZT0nY29sb3I6IGxpbWUnPiR7cmVzdWx0cy50b3RhbF9wYWdlX2hpdHMudG9GaXhlZCgwKX08L2I+XHJcbiAgICAgICAgICAgIFRvdGFsIHBhZ2UgY2FsbHM6IDxiPiR7cmVzdWx0cy50b3RhbF9jYWxscy50b0ZpeGVkKDApfTwvYj5cclxuICAgICAgICAgICAgYC5yZXBsYWNlKFJlZ0V4cChcIlxcblwiLCBcImdcIiksIFwiPGJyIC8+XCIpO1xyXG5cclxuICAgICAgICAgICAgcmVzdWx0c19lbC5pbm5lckhUTUwgKz0gXCI8YnIgLz5cIjtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgSUFuaW1hdGlvbkdVSSBmcm9tIFwiLi4vLi4vc2hhcmVkL2ludGVyZmFjZXMvSUFuaW1hdGlvbkdVSVwiO1xyXG5pbXBvcnQgTWVudSBmcm9tIFwiLi9NZW51XCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBBbmltYXRpb25HVUkgaW1wbGVtZW50cyBJQW5pbWF0aW9uR1VJIHtcclxuICAgIG1lbnU6IE1lbnVcclxuXHJcbiAgICB2aXNpYmxlOiBib29sZWFuID0gZmFsc2VcclxuICAgIHBsYXlpbmc6IGJvb2xlYW4gPSBmYWxzZVxyXG4gICAgc3BlZWQ6IG51bWJlciA9IDFcclxuXHJcbiAgICBHVUk6IEhUTUxEaXZFbGVtZW50IHwgbnVsbCA9IG51bGxcclxuICAgIE1FTlU6IEhUTUxEaXZFbGVtZW50IHwgbnVsbCA9IG51bGxcclxuXHJcbiAgICBwbGF5X3BhdXNlX2J1dHRvbjogSFRNTEJ1dHRvbkVsZW1lbnQgfCBudWxsID0gbnVsbFxyXG4gICAgc3RlcF9idXR0b246IEhUTUxCdXR0b25FbGVtZW50IHwgbnVsbCA9IG51bGxcclxuICAgIHN0b3BfYnV0dG9uOiBIVE1MQnV0dG9uRWxlbWVudCB8IG51bGwgPSBudWxsXHJcbiAgICBzcGVlZF9zbGlkZXI6IEhUTUxJbnB1dEVsZW1lbnQgfCBudWxsID0gbnVsbFxyXG5cclxuICAgIGluZm9fYWxnb3JpdGhtOiBIVE1MUGFyYWdyYXBoRWxlbWVudCB8IG51bGwgPSBudWxsXHJcbiAgICBpbmZvX3RpbWU6IEhUTUxQYXJhZ3JhcGhFbGVtZW50IHwgbnVsbCA9IG51bGxcclxuICAgIGluZm9faXNfZG9uZTogSFRNTERpdkVsZW1lbnQgfCBudWxsID0gbnVsbFxyXG5cclxuICAgIGluZm9faW5fcXVldWU6IEhUTUxQYXJhZ3JhcGhFbGVtZW50IHwgbnVsbCA9IG51bGxcclxuICAgIGluZm9fZmluaXNoZWQ6IEhUTUxQYXJhZ3JhcGhFbGVtZW50IHwgbnVsbCA9IG51bGxcclxuICAgIGluZm9fdG90YWxfcGFnZV9mYXVsdHM6IEhUTUxQYXJhZ3JhcGhFbGVtZW50IHwgbnVsbCA9IG51bGxcclxuICAgIGluZm9fdG90YWxfcGFnZV9oaXRzOiBIVE1MUGFyYWdyYXBoRWxlbWVudCB8IG51bGwgPSBudWxsXHJcblxyXG4gICAgZnJhbWVfcm93czogQXJyYXk8SFRNTFRhYmxlUm93RWxlbWVudD4gPSBbXVxyXG5cclxuICAgIHNlZV9jb2RlX2J1dHRvbjogSFRNTEJ1dHRvbkVsZW1lbnQgfCBudWxsID0gbnVsbFxyXG5cclxuICAgIC8qIHNldEludGVydmFsICovXHJcbiAgICBzdG9yZWRTZXRJbnRlcnZhbDogTm9kZUpTLlRpbWVyIHwgbnVsbCA9IG51bGxcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihtZW51OiBNZW51KSB7XHJcbiAgICAgICAgdGhpcy5tZW51ID0gbWVudTtcclxuICAgIH1cclxuXHJcbiAgICBpbml0KCk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuR1VJID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJhbmltYXRpb25fZ3VpXCIpIGFzIEhUTUxEaXZFbGVtZW50O1xyXG4gICAgICAgIHRoaXMuTUVOVSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwic2V0dGluZ3NcIikgYXMgSFRNTERpdkVsZW1lbnQ7XHJcblxyXG4gICAgICAgIHRoaXMucGxheV9wYXVzZV9idXR0b24gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImFuaW1hdGlvbl9wbGF5X3BhdXNlXCIpIGFzIEhUTUxCdXR0b25FbGVtZW50O1xyXG4gICAgICAgIHRoaXMuc3RlcF9idXR0b24gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImFuaW1hdGlvbl9zdGVwXCIpIGFzIEhUTUxCdXR0b25FbGVtZW50O1xyXG4gICAgICAgIHRoaXMuc3RvcF9idXR0b24gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImFuaW1hdGlvbl9zdG9wXCIpIGFzIEhUTUxCdXR0b25FbGVtZW50O1xyXG4gICAgICAgIHRoaXMuc3BlZWRfc2xpZGVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJhbmltYXRpb25fc3BlZWRfc2xpZGVyXCIpIGFzIEhUTUxJbnB1dEVsZW1lbnQ7XHJcblxyXG4gICAgICAgIHRoaXMuaW5mb19hbGdvcml0aG0gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImFuaW1hdGlvbl9pbmZvX2FsZ29yaXRobV92YWx1ZVwiKSBhcyBIVE1MUGFyYWdyYXBoRWxlbWVudDtcclxuICAgICAgICB0aGlzLmluZm9fdGltZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiYW5pbWF0aW9uX2luZm9fdGltZV92YWx1ZVwiKSBhcyBIVE1MUGFyYWdyYXBoRWxlbWVudDtcclxuICAgICAgICB0aGlzLmluZm9faXNfZG9uZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiYW5pbWF0aW9uX2lzX2RvbmVcIikgYXMgSFRNTERpdkVsZW1lbnQ7XHJcblxyXG4gICAgICAgIHRoaXMuaW5mb19pbl9xdWV1ZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiY2FsbHNfaW5fcXVldWVfdmFsdWVcIikgYXMgSFRNTFBhcmFncmFwaEVsZW1lbnQ7XHJcbiAgICAgICAgdGhpcy5pbmZvX2ZpbmlzaGVkID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJjYWxsc19maW5pc2hlZF92YWx1ZVwiKSBhcyBIVE1MUGFyYWdyYXBoRWxlbWVudDtcclxuICAgICAgICB0aGlzLmluZm9fdG90YWxfcGFnZV9mYXVsdHMgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInRvdGFsX3BhZ2VfZmF1bHRzX3ZhbHVlXCIpIGFzIEhUTUxQYXJhZ3JhcGhFbGVtZW50O1xyXG4gICAgICAgIHRoaXMuaW5mb190b3RhbF9wYWdlX2hpdHMgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInRvdGFsX3BhZ2VfaGl0c192YWx1ZVwiKSBhcyBIVE1MUGFyYWdyYXBoRWxlbWVudDtcclxuXHJcbiAgICAgICAgdGhpcy5zZWVfY29kZV9idXR0b24gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImNvZGVfYnV0dG9uXCIpIGFzIEhUTUxCdXR0b25FbGVtZW50O1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBoaWRlIGVsZW1lbnRzXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdGhpcy5pbmZvX2lzX2RvbmUuc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xyXG5cclxuICAgICAgICAvKlxyXG4gICAgICAgICAqIEJpbmQgZXZlbnQgbGlzdGVuZXJzXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdGhpcy5wbGF5X3BhdXNlX2J1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLnRvZ2dsZVBsYXlpbmcoKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgdGhpcy5zdGVwX2J1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLnN0ZXAoKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgdGhpcy5zdG9wX2J1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLnRvZ2dsZVZpc2libGUoZmFsc2UpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICB0aGlzLnNwZWVkX3NsaWRlci5hZGRFdmVudExpc3RlbmVyKFwiaW5wdXRcIiwgKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLnNwZWVkID0gcGFyc2VJbnQodGhpcy5zcGVlZF9zbGlkZXIhLnZhbHVlKTtcclxuICAgICAgICAgICAgdGhpcy5yZWZyZXNoU3BlZWQoKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgdGhpcy5zZWVfY29kZV9idXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcclxuICAgICAgICAgICAgaWYgKHRoaXMubWVudS5tZW1vcnkuYWxsb2NhdGlvbkFsZ29yaXRobSA9PSBudWxsKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG5cclxuICAgICAgICAgICAgY29uc3QgYWxnb3JpdGhtTmFtZSA9IHRoaXMubWVudS5tZW1vcnkuYWxsb2NhdGlvbkFsZ29yaXRobS5uYW1lO1xyXG4gICAgICAgICAgICB3aW5kb3cub3BlbihgaHR0cHM6Ly9naXRodWIuY29tL2JydW4wbmUvc2NoZWR1bGluZy1zaW0vYmxvYi9tYWluL3BhZ2VfcmVwbGFjZW1lbnRfc3JjL2NsYXNzZXMvYWxnb3JpdGhtcy8ke2FsZ29yaXRobU5hbWV9LnRzYCwgXCJfYmxhbmtcIikhLmZvY3VzKCk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFNldEludGVydmFsXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdGhpcy5yZWZyZXNoU3BlZWQoKTtcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogcHJlcGFyZSBIVE1MIHRhYmxlIG9mIHN0YXRlc1xyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHRoaXMuaW5pdFN0YXRlVGFibGUoKTtcclxuICAgIH1cclxuICAgIHRvZ2dsZVBsYXlpbmcocGxheWluZz86IGJvb2xlYW4pOiB2b2lkIHtcclxuICAgICAgICBpZiAocGxheWluZyA9PSBudWxsKVxyXG4gICAgICAgICAgICB0aGlzLnBsYXlpbmcgPSAhdGhpcy5wbGF5aW5nO1xyXG4gICAgICAgIGVsc2VcclxuICAgICAgICAgICAgdGhpcy5wbGF5aW5nID0gcGxheWluZztcclxuXHJcbiAgICAgICAgdGhpcy5yZWZyZXNoU3BlZWQoKTtcclxuXHJcbiAgICAgICAgdGhpcy5wbGF5X3BhdXNlX2J1dHRvbiEuaW5uZXJIVE1MID0gdGhpcy5wbGF5aW5nID8gXCJQYXVzZVwiIDogXCJQbGF5XCI7XHJcbiAgICB9XHJcblxyXG4gICAgdG9nZ2xlVmlzaWJsZSh2aXNpYmxlPzogYm9vbGVhbik6IHZvaWQge1xyXG4gICAgICAgIGlmICh2aXNpYmxlID09IG51bGwpXHJcbiAgICAgICAgICAgIHRoaXMudmlzaWJsZSA9ICF0aGlzLnZpc2libGU7XHJcbiAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICB0aGlzLnZpc2libGUgPSB2aXNpYmxlO1xyXG5cclxuICAgICAgICBpZiAodGhpcy52aXNpYmxlKSB7XHJcbiAgICAgICAgICAgIHRoaXMuR1VJIS5zdHlsZS5kaXNwbGF5ID0gXCJibG9ja1wiO1xyXG4gICAgICAgICAgICB0aGlzLk1FTlUhLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcclxuXHJcbiAgICAgICAgICAgIHRoaXMubWVudS5kaXNwbGF5LnJlc2l6ZUNhbGxiYWNrID0gKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5kcmF3Q3VycmVudFN0YXRlKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5kcmF3Q3VycmVudFN0YXRlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLkdVSSEuc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xyXG4gICAgICAgICAgICB0aGlzLk1FTlUhLnN0eWxlLmRpc3BsYXkgPSBcImZsZXhcIjtcclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLnN0b3JlZFNldEludGVydmFsICE9IG51bGwpXHJcbiAgICAgICAgICAgICAgICBjbGVhckludGVydmFsKHRoaXMuc3RvcmVkU2V0SW50ZXJ2YWwpO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5tZW51LmRpc3BsYXkucmVzaXplQ2FsbGJhY2sgPSAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm1lbnUucmVmcmVzaENhbGxzKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5tZW51LnJlZnJlc2hDYWxscygpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZXNldCgpOiB2b2lkIHtcclxuICAgICAgICBpZiAodGhpcy5wbGF5X3BhdXNlX2J1dHRvbiA9PSBudWxsIHx8IHRoaXMuaW5mb19pc19kb25lID09IG51bGwgfHwgdGhpcy5zdGVwX2J1dHRvbiA9PSBudWxsKVxyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJjYWxsIGluaXQoKSBmaXJzdCFcIik7XHJcblxyXG4gICAgICAgIHRoaXMubWVudS5tZW1vcnkuaW5pdCgpO1xyXG5cclxuICAgICAgICB0aGlzLnBsYXlfcGF1c2VfYnV0dG9uLmlubmVySFRNTCA9IFwiUGxheVwiO1xyXG4gICAgICAgIHRoaXMucGxheWluZyA9IGZhbHNlO1xyXG5cclxuICAgICAgICB0aGlzLmluZm9faXNfZG9uZS5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XHJcblxyXG4gICAgICAgIHRoaXMucGxheV9wYXVzZV9idXR0b24uZGlzYWJsZWQgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLnN0ZXBfYnV0dG9uLmRpc2FibGVkID0gZmFsc2U7XHJcblxyXG4gICAgICAgIHRoaXMuaW5pdFN0YXRlVGFibGUoKTtcclxuICAgIH1cclxuXHJcbiAgICBzdGFydEFuaW1hdGlvbigpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLnJlc2V0KCk7XHJcbiAgICAgICAgdGhpcy50b2dnbGVWaXNpYmxlKHRydWUpO1xyXG4gICAgfVxyXG5cclxuICAgIGRyYXdDdXJyZW50U3RhdGUoKTogdm9pZCB7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogcmVmcmVzaCBpbmZvXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdGhpcy5yZWZyZXNoSW5mbygpO1xyXG5cclxuICAgICAgICB0aGlzLmRyYXdDYWxscygpO1xyXG4gICAgfVxyXG5cclxuICAgIGluaXRTdGF0ZVRhYmxlKCk6IHZvaWQge1xyXG4gICAgICAgIC8qIGdyYWIgZWxlbWVudHMgKi9cclxuICAgICAgICBjb25zdCB0aW1lX3JvdyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiYW5pbWF0aW9uX3RhYmxlX3RpbWVcIikgYXMgSFRNTFRhYmxlUm93RWxlbWVudDtcclxuICAgICAgICBjb25zdCBjYWxsc19yb3cgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImFuaW1hdGlvbl90YWJsZV9wYWdlX2NhbGxzXCIpIGFzIEhUTUxUYWJsZVJvd0VsZW1lbnQ7XHJcbiAgICAgICAgY29uc3QgdGJvZHkgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImFuaW1hdGlvbl90YWJsZV9ib2R5XCIpIGFzIEhUTUxUYWJsZVNlY3Rpb25FbGVtZW50O1xyXG5cclxuICAgICAgICAvKiBjbGVhciB0YWJsZSAqL1xyXG4gICAgICAgIHRpbWVfcm93LmlubmVySFRNTCA9IFwiXCI7XHJcbiAgICAgICAgY2FsbHNfcm93LmlubmVySFRNTCA9IFwiXCI7XHJcblxyXG4gICAgICAgIC8qIHRpbWUgKi9cclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGNvbnN0IHRpbWVfcm93X2hlYWRlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJ0aFwiKTtcclxuICAgICAgICAgICAgdGltZV9yb3dfaGVhZGVyLmlubmVySFRNTCA9IFwiVGltZVwiO1xyXG4gICAgICAgICAgICB0aW1lX3Jvd19oZWFkZXIuY2xhc3NMaXN0LmFkZChcImhlYWRlclwiKTtcclxuICAgICAgICAgICAgdGltZV9yb3cuYXBwZW5kQ2hpbGQodGltZV9yb3dfaGVhZGVyKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qIGNhbGxzICovXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBjb25zdCBjYWxsc19yb3dfaGVhZGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInRoXCIpO1xyXG4gICAgICAgICAgICBjYWxsc19yb3dfaGVhZGVyLmlubmVySFRNTCA9IFwiUGFnZSBjYWxsc1wiO1xyXG4gICAgICAgICAgICBjYWxsc19yb3dfaGVhZGVyLmNsYXNzTGlzdC5hZGQoXCJoZWFkZXJcIik7XHJcbiAgICAgICAgICAgIGNhbGxzX3Jvdy5hcHBlbmRDaGlsZChjYWxsc19yb3dfaGVhZGVyKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qIGZyYW1lcyAqL1xyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgLyogcmVtb3ZlIG9sZCByb3dzICovXHJcbiAgICAgICAgICAgIHdoaWxlICh0Ym9keS5sYXN0Q2hpbGQgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaWQgPSAodGJvZHkubGFzdENoaWxkIGFzIEhUTUxFbGVtZW50KS5pZDtcclxuICAgICAgICAgICAgICAgIGlmIChpZCA9PSBcImFuaW1hdGlvbl90YWJsZV9wYWdlX2NhbGxzXCIpIC8vIHNraXAgdGhlIHJvdyB3aXRoIHBhZ2UgY2FsbHNcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICAgICAgICB0Ym9keS5yZW1vdmVDaGlsZCh0Ym9keS5sYXN0Q2hpbGQpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvKiBhZGQgYSByb3cgZm9yIGVhY2ggZnJhbWUgKi9cclxuICAgICAgICAgICAgY29uc3QgZnJhbWVfcm93czogQXJyYXk8SFRNTFRhYmxlUm93RWxlbWVudD4gPSBbXTtcclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLm1lbnUubWVtb3J5Lm51bWJlcl9vZl9mcmFtZXM7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZnJhbWVfcm93ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInRyXCIpO1xyXG5cclxuICAgICAgICAgICAgICAgIGNvbnN0IGZyYW1lX3Jvd19oZWFkZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwidGhcIik7XHJcbiAgICAgICAgICAgICAgICBmcmFtZV9yb3dfaGVhZGVyLmlubmVySFRNTCA9IGBGcmFtZSAke2l9YDtcclxuICAgICAgICAgICAgICAgIGZyYW1lX3Jvdy5hcHBlbmRDaGlsZChmcmFtZV9yb3dfaGVhZGVyKTtcclxuXHJcbiAgICAgICAgICAgICAgICBmcmFtZV9yb3dzLnB1c2goZnJhbWVfcm93KTtcclxuICAgICAgICAgICAgICAgIHRib2R5LmFwcGVuZENoaWxkKGZyYW1lX3Jvdyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5mcmFtZV9yb3dzID0gZnJhbWVfcm93cztcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZHJhd0NhbGxzKFNUQVJUX1g/OiBudW1iZXIsIFNUQVJUX1k/OiBudW1iZXIsIFdJRFRIPzogbnVtYmVyLCBIRUlHSFQ/OiBudW1iZXIsIGNhbGxzVG9EcmF3PzogYW55KTogdm9pZCB7XHJcbiAgICAgICAgLyogZ3JhYiBlbGVtZW50cyAqL1xyXG4gICAgICAgIGNvbnN0IHRpbWVfcm93ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJhbmltYXRpb25fdGFibGVfdGltZVwiKSBhcyBIVE1MVGFibGVSb3dFbGVtZW50O1xyXG4gICAgICAgIGNvbnN0IGNhbGxzX3JvdyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiYW5pbWF0aW9uX3RhYmxlX3BhZ2VfY2FsbHNcIikgYXMgSFRNTFRhYmxlUm93RWxlbWVudDtcclxuXHJcbiAgICAgICAgLyogb25seSBhZGQgb25lIGNvbHVtbiBmb3IgdGhlIG5ldyBzdGF0ZSAqL1xyXG4gICAgICAgIGNvbnN0IG5ld0NhbGwgPSB0aGlzLm1lbnUubWVtb3J5LmNhbGxfaGlzdG9yeS5hdCgtMSk7XHJcbiAgICAgICAgaWYgKG5ld0NhbGwgPT0gbnVsbClcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG5cclxuICAgICAgICAvKiB0aW1lICovXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBjb25zdCB0aW1lVGlja0VsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInRoXCIpO1xyXG4gICAgICAgICAgICB0aW1lVGlja0VsLmlubmVySFRNTCA9IGAke3RoaXMubWVudS5tZW1vcnkudGltZX1gO1xyXG4gICAgICAgICAgICB0aW1lX3Jvdy5hcHBlbmRDaGlsZCh0aW1lVGlja0VsKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qIGNhbGxzICovXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBjb25zdCBjYWxsc1RpY2tFbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJ0aFwiKTtcclxuICAgICAgICAgICAgY2FsbHNUaWNrRWwuaW5uZXJIVE1MID0gYCR7bmV3Q2FsbC5pZH1gO1xyXG5cclxuICAgICAgICAgICAgY2FsbHNfcm93LmFwcGVuZENoaWxkKGNhbGxzVGlja0VsKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qIGZyYW1lcyAqL1xyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLm1lbnUubWVtb3J5Lm51bWJlcl9vZl9mcmFtZXM7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZnJhbWVfcm93ID0gdGhpcy5mcmFtZV9yb3dzW2ldO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgcGFnZSA9IHRoaXMubWVudS5tZW1vcnkuZnJhbWVzW2ldLnBhZ2U7XHJcblxyXG4gICAgICAgICAgICAgICAgY29uc3QgZnJhbWVUaWNrRWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwidGhcIik7XHJcbiAgICAgICAgICAgICAgICBmcmFtZVRpY2tFbC5pbm5lckhUTUwgPSBgJHtwYWdlICE9IG51bGwgPyBwYWdlLmlkIDogXCJcIn1gO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChwYWdlICE9IG51bGwgJiYgcGFnZS5pZCA9PSBuZXdDYWxsLmlkICYmIHRoaXMubWVudS5tZW1vcnkubGFzdF9jYWxsX2NhdXNlZF9mYXVsdCkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIG1ha2UgcGFnZSBmYXVsdHMgcmVkXHJcbiAgICAgICAgICAgICAgICAgICAgZnJhbWVUaWNrRWwuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gXCJyZWRcIjtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5tZW51Lm1lbW9yeS5mcmFtZXNbaV0ucHJvY2VzcyAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZnJhbWVUaWNrRWwuaW5uZXJIVE1MICs9IGAgPHNwYW4gc3R5bGU9J2NvbG9yOiB5ZWxsb3cnPigke3RoaXMubWVudS5tZW1vcnkuZnJhbWVzW2ldLnByb2Nlc3MhLmlkfSk8L3NwYW4+YDtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBmcmFtZV9yb3cuYXBwZW5kQ2hpbGQoZnJhbWVUaWNrRWwpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKiBzY3JvbGwgdG8gdGhlIHJpZ2h0ICovXHJcbiAgICAgICAgY29uc3QgdGFibGUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImFuaW1hdGlvbl9jYWxsX3RhYmxlXCIpIGFzIEhUTUxUYWJsZUVsZW1lbnQ7XHJcbiAgICAgICAgdGFibGUuc2Nyb2xsTGVmdCA9IHRhYmxlLnNjcm9sbFdpZHRoO1xyXG4gICAgfVxyXG5cclxuICAgIHJlZnJlc2hJbmZvKCk6IHZvaWQge1xyXG4gICAgICAgIGNvbnN0IG1lbW9yeSA9IHRoaXMubWVudS5tZW1vcnk7XHJcbiAgICAgICAgaWYgKG1lbW9yeS5hbGxvY2F0aW9uQWxnb3JpdGhtID09IG51bGwpXHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcImNhbGwgc3RhcnRBbmltYXRpb24oKSBmaXJzdCFcIik7XHJcblxyXG4gICAgICAgIHRoaXMuaW5mb19hbGdvcml0aG0hLmlubmVySFRNTCA9IG1lbW9yeS5hbGxvY2F0aW9uQWxnb3JpdGhtLm5hbWU7XHJcbiAgICAgICAgdGhpcy5pbmZvX3RpbWUhLmlubmVySFRNTCA9IG1lbW9yeS50aW1lLnRvU3RyaW5nKCk7XHJcblxyXG4gICAgICAgIGlmIChtZW1vcnkuaXNGaW5pc2hlZCgpKVxyXG4gICAgICAgICAgICB0aGlzLmluZm9faXNfZG9uZSEuc3R5bGUuZGlzcGxheSA9IFwiYmxvY2tcIjtcclxuICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgIHRoaXMuaW5mb19pc19kb25lIS5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XHJcblxyXG4gICAgICAgIHRoaXMuaW5mb190b3RhbF9wYWdlX2hpdHMhLmlubmVySFRNTCA9IChtZW1vcnkuY2FsbF9oaXN0b3J5Lmxlbmd0aCAtIG1lbW9yeS50b3RhbF9wYWdlX2ZhdWx0cykudG9TdHJpbmcoKTtcclxuICAgICAgICB0aGlzLmluZm9fdG90YWxfcGFnZV9mYXVsdHMhLmlubmVySFRNTCA9IG1lbW9yeS50b3RhbF9wYWdlX2ZhdWx0cy50b1N0cmluZygpO1xyXG5cclxuICAgICAgICB0aGlzLmluZm9faW5fcXVldWUhLmlubmVySFRNTCA9IG1lbW9yeS5jYWxsX3F1ZXVlLmxlbmd0aC50b1N0cmluZygpO1xyXG4gICAgICAgIHRoaXMuaW5mb19maW5pc2hlZCEuaW5uZXJIVE1MID0gbWVtb3J5LmNhbGxfaGlzdG9yeS5sZW5ndGgudG9TdHJpbmcoKTtcclxuICAgIH1cclxuXHJcbiAgICByZWZyZXNoU3BlZWQoKTogdm9pZCB7XHJcbiAgICAgICAgaWYgKHRoaXMuc3RvcmVkU2V0SW50ZXJ2YWwgIT0gbnVsbClcclxuICAgICAgICAgICAgY2xlYXJJbnRlcnZhbCh0aGlzLnN0b3JlZFNldEludGVydmFsKTtcclxuXHJcbiAgICAgICAgdGhpcy5zdG9yZWRTZXRJbnRlcnZhbCA9IHNldEludGVydmFsKCgoKSA9PiB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnBsYXlpbmcpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuc3RlcCgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSkuYmluZCh0aGlzKSwgMTAwMCAvIHRoaXMuc3BlZWQpO1xyXG4gICAgfVxyXG5cclxuICAgIHN0ZXAoKTogdm9pZCB7XHJcbiAgICAgICAgaWYgKHRoaXMubWVudS5tZW1vcnkuaXNGaW5pc2hlZCgpKVxyXG4gICAgICAgICAgICByZXR1cm47XHJcblxyXG4gICAgICAgIHRoaXMubWVudS5tZW1vcnkubmV4dFRpY2soKTtcclxuICAgICAgICB0aGlzLmRyYXdDdXJyZW50U3RhdGUoKTtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMubWVudS5tZW1vcnkuaXNGaW5pc2hlZCgpKSB7XHJcbiAgICAgICAgICAgIHRoaXMudG9nZ2xlUGxheWluZyhmYWxzZSk7XHJcbiAgICAgICAgICAgIHRoaXMubWVudS5tZW1vcnkuZGlzcGxheVJlc3VsdHModGhpcy5tZW51Lm1lbW9yeS5nZXRSZXN1bHRzKCkpO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5hZnRlckRvbmUoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgYWZ0ZXJEb25lKCk6IHZvaWQge1xyXG4gICAgICAgIGlmICh0aGlzLmluZm9faXNfZG9uZSA9PSBudWxsIHx8IHRoaXMucGxheV9wYXVzZV9idXR0b24gPT0gbnVsbCB8fCB0aGlzLnN0ZXBfYnV0dG9uID09IG51bGwpXHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcImNhbGwgaW5pdCgpIGZpcnN0IVwiKTtcclxuXHJcbiAgICAgICAgdGhpcy5pbmZvX2lzX2RvbmUuc3R5bGUuZGlzcGxheSA9IFwiYmxvY2tcIjtcclxuXHJcbiAgICAgICAgdGhpcy5wbGF5X3BhdXNlX2J1dHRvbi5kaXNhYmxlZCA9IHRydWU7XHJcbiAgICAgICAgdGhpcy5zdGVwX2J1dHRvbi5kaXNhYmxlZCA9IHRydWU7XHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgUGFnZSBmcm9tIFwiLi9QYWdlXCI7XHJcbmltcG9ydCBQcm9jZXNzIGZyb20gXCIuL1Byb2Nlc3NcIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEZyYW1lIHtcclxuICAgIHN0YXRpYyBuZXh0X2lkOiBudW1iZXIgPSAwXHJcblxyXG4gICAgaWQ6IG51bWJlclxyXG4gICAgcGFnZTogUGFnZSB8IG51bGxcclxuICAgIHByb2Nlc3M6IFByb2Nlc3MgfCBudWxsXHJcblxyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgdGhpcy5wYWdlID0gbnVsbDtcclxuICAgICAgICB0aGlzLnByb2Nlc3MgPSBudWxsO1xyXG5cclxuICAgICAgICB0aGlzLmlkID0gRnJhbWUubmV4dF9pZCsrO1xyXG4gICAgfVxyXG59IiwiaW1wb3J0IFJlcGxhY2VtZW50QWxnb3JpdGhtIGZyb20gXCIuL1JlcGxhY2VtZW50QWxnb3JpdGhtXCI7XHJcbmltcG9ydCB7IE1lbW9yeVN0YXRlRGF0YSB9IGZyb20gXCIuL0FsbG9jYXRpbmdNTVVcIjtcclxuXHJcbi8qKlxyXG4gKiBMZWFzdCBSZWNlbnRseSBVc2VkIChMUlUpXHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBMUlUgaW1wbGVtZW50cyBSZXBsYWNlbWVudEFsZ29yaXRobSB7XHJcbiAgICBuYW1lOiBzdHJpbmcgPSBcIkxSVVwiXHJcblxyXG4gICAgaGFuZGxlUGFnZUZhdWx0KGRhdGE6IE1lbW9yeVN0YXRlRGF0YSk6IG51bWJlciB7XHJcbiAgICAgICAgLyogZmluZCB0aGUgcGFnZSB0aGF0IHdhcyB1c2VkIHRoZSBsb25nZXN0IGFnbyAqL1xyXG4gICAgICAgIGxldCBmcmFtZV90b19yZXBsYWNlX2luZGV4ID0gLTE7XHJcbiAgICAgICAgbGV0IGxlYXN0X3JlY2VudGx5X3VzZWRfcGFnZV9pbmRleCA9IC0xO1xyXG5cclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGRhdGEuY3VycmVudF9mcmFtZXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgY29uc3QgZnJhbWUgPSBkYXRhLmN1cnJlbnRfZnJhbWVzW2ldO1xyXG5cclxuICAgICAgICAgICAgaWYgKGZyYW1lLnByb2Nlc3MgIT0gZGF0YS5wYWdlX2NhbGwucHJvY2Vzcykge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIkZyYW1lIGlzIGFzc2lnbmVkIHRvIGEgZGlmZmVyZW50IHByb2Nlc3MgLSB0aGlzIHNob3VsZCBiZSBlbnN1cmVkIG5vdCB0byBoYXBwZW4gYnkgdGhlIGNhbGxlclwiKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKGZyYW1lLnBhZ2UgPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKFwiRnJhbWUgaXMgZW1wdHkgLSB0aGlzIHNob3VsZCBiZSBlbnN1cmVkIG5vdCB0byBoYXBwZW4gYnkgdGhlIGNhbGxlclwiKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBsZXQgcGFnZV9pbmRleCA9IC0xO1xyXG4gICAgICAgICAgICBmb3IgKGxldCBqID0gZGF0YS5wcmV2aW91c19wYWdlX2NhbGxzLmxlbmd0aCAtIDE7IGogPj0gMDsgai0tKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBwcmV2aW91c19wYWdlX2NhbGwgPSBkYXRhLnByZXZpb3VzX3BhZ2VfY2FsbHNbal07XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHByZXZpb3VzX3BhZ2VfY2FsbC5pZCA9PSBmcmFtZS5wYWdlLmlkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcGFnZV9pbmRleCA9IGo7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChwYWdlX2luZGV4ID09IC0xKSB7XHJcbiAgICAgICAgICAgICAgICAvKiBwYWdlIHdhcyBuZXZlciB1c2VkIGJlZm9yZSAqL1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChwYWdlX2luZGV4IDwgbGVhc3RfcmVjZW50bHlfdXNlZF9wYWdlX2luZGV4IHx8IGxlYXN0X3JlY2VudGx5X3VzZWRfcGFnZV9pbmRleCA9PSAtMSkge1xyXG4gICAgICAgICAgICAgICAgLyogcGFnZSB3YXMgdXNlZCBsb25nZXIgYWdvICovXHJcbiAgICAgICAgICAgICAgICBmcmFtZV90b19yZXBsYWNlX2luZGV4ID0gaTtcclxuICAgICAgICAgICAgICAgIGxlYXN0X3JlY2VudGx5X3VzZWRfcGFnZV9pbmRleCA9IHBhZ2VfaW5kZXg7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChmcmFtZV90b19yZXBsYWNlX2luZGV4ID09IC0xKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUud2FybihcIk5vIGZyYW1lIHRvIHJlcGxhY2UgZm91bmQgYnkgTFJVXCIpO1xyXG4gICAgICAgICAgICByZXR1cm4gLTE7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gZGF0YS5jdXJyZW50X2ZyYW1lc1tmcmFtZV90b19yZXBsYWNlX2luZGV4XS5pZDtcclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQgSU1lbnUgZnJvbSBcIi4uLy4uL3NoYXJlZC9pbnRlcmZhY2VzL0lNZW51XCI7XHJcbmltcG9ydCBEaXNwbGF5IGZyb20gXCIuLi8uLi9zaGFyZWQvY2xhc3Nlcy9EaXNwbGF5XCI7XHJcbmltcG9ydCBBbGxvY2F0aW5nTU1VIGZyb20gXCIuL0FsbG9jYXRpbmdNTVVcIjtcclxuaW1wb3J0IFByb2Nlc3MgZnJvbSBcIi4vUHJvY2Vzc1wiO1xyXG5pbXBvcnQgUGFnZSBmcm9tIFwiLi9QYWdlXCI7XHJcbmltcG9ydCBFcXVhbCBmcm9tIFwiLi9hbGdvcml0aG1zL0VxdWFsXCI7XHJcbmltcG9ydCBBbmltYXRpb25HVUkgZnJvbSBcIi4vQW5pbWF0aW9uR1VJXCI7XHJcbmltcG9ydCBQcm9wb3J0aW9uYWwgZnJvbSBcIi4vYWxnb3JpdGhtcy9Qcm9wb3J0aW9uYWxcIjtcclxuaW1wb3J0IFBhZ2VGYXVsdENvbnRyb2wgZnJvbSBcIi4vYWxnb3JpdGhtcy9QYWdlRmF1bHRDb250cm9sXCI7XHJcbmltcG9ydCBMb2NhbGl0eU1vZGVsIGZyb20gXCIuL2FsZ29yaXRobXMvTG9jYWxpdHlNb2RlbFwiO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTWVudSBpbXBsZW1lbnRzIElNZW51IHtcclxuICAgIGRpc3BsYXk6IERpc3BsYXlcclxuICAgIG1lbW9yeTogQWxsb2NhdGluZ01NVVxyXG4gICAgYW5pbWF0aW9uR1VJOiBBbmltYXRpb25HVUlcclxuXHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICB0aGlzLmRpc3BsYXkgPSBuZXcgRGlzcGxheSgpO1xyXG4gICAgICAgIHRoaXMubWVtb3J5ID0gbmV3IEFsbG9jYXRpbmdNTVUoKTtcclxuXHJcbiAgICAgICAgdGhpcy5hbmltYXRpb25HVUkgPSBuZXcgQW5pbWF0aW9uR1VJKHRoaXMpO1xyXG4gICAgfVxyXG5cclxuICAgIGluaXQoKTogdm9pZCB7XHJcbiAgICAgICAgY29uc3QgcnVuX2J1dHRvbiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwicnVuX2J1dHRvblwiKSBhcyBIVE1MQnV0dG9uRWxlbWVudDtcclxuICAgICAgICBydW5fYnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7IHRoaXMucnVuKCkgfSk7XHJcblxyXG4gICAgICAgIGNvbnN0IHJ1bl93aXRoX2FuaW1hdGlvbl9idXR0b24gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInJ1bl93aXRoX2FuaW1hdGlvbl9idXR0b25cIikgYXMgSFRNTEJ1dHRvbkVsZW1lbnQ7XHJcbiAgICAgICAgcnVuX3dpdGhfYW5pbWF0aW9uX2J1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4geyB0aGlzLnJ1bih0cnVlKSB9KTtcclxuXHJcbiAgICAgICAgY29uc3QgYWRkX2J1dHRvbiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiYWRkX2J1dHRvblwiKSBhcyBIVE1MQnV0dG9uRWxlbWVudDtcclxuICAgICAgICBhZGRfYnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7IHRoaXMuYWRkUHJvY2Vzc2VzKCkgfSk7XHJcblxyXG4gICAgICAgIGNvbnN0IGNsZWFyX2J1dHRvbiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiY2xlYXJfYnV0dG9uXCIpIGFzIEhUTUxCdXR0b25FbGVtZW50O1xyXG4gICAgICAgIGNsZWFyX2J1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4geyB0aGlzLmNsZWFyUHJvY2Vzc2VzKCkgfSk7XHJcblxyXG4gICAgICAgIGNvbnN0IGdlbmVyYXRlX2NhbGxfcXVldWVfYnV0dG9uID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJnZW5lcmF0ZV9jYWxsX3F1ZXVlX2J1dHRvblwiKSBhcyBIVE1MQnV0dG9uRWxlbWVudDtcclxuICAgICAgICBnZW5lcmF0ZV9jYWxsX3F1ZXVlX2J1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4geyB0aGlzLmFkZENhbGxzKCkgfSk7XHJcblxyXG4gICAgICAgIGNvbnN0IGNsZWFyX2NhbGxfcXVldWVfYnV0dG9uID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJjbGVhcl9jYWxsX3F1ZXVlX2J1dHRvblwiKSBhcyBIVE1MQnV0dG9uRWxlbWVudDtcclxuICAgICAgICBjbGVhcl9jYWxsX3F1ZXVlX2J1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4geyB0aGlzLmNsZWFyQ2FsbHMoKSB9KTtcclxuXHJcbiAgICAgICAgLypcclxuICAgICAgICAgKiBpbml0IFxyXG4gICAgICAgICAqIHNldCBjYWxsYmFjayBmb3IgcmVzaXplXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdGhpcy5tZW1vcnkuaW5pdCg1LCAzKTtcclxuICAgICAgICB0aGlzLmRpc3BsYXkuaW5pdChcIm1haW5fY2FudmFzXCIpO1xyXG4gICAgICAgIHRoaXMuYW5pbWF0aW9uR1VJLmluaXQoKTtcclxuICAgICAgICB0aGlzLmRpc3BsYXkuc2V0UmVzaXplQ2FsbGJhY2soKCkgPT4geyB0aGlzLnJlZnJlc2hDYWxscygpIH0pO1xyXG5cclxuICAgICAgICAvKiogXHJcbiAgICAgICAgICogYmFzaWMgc2V0dGluZ3NcclxuICAgICAgICAgKi9cclxuICAgICAgICBjb25zdCBudW1iZXJfb2ZfZnJhbWVzID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJzX2ZyYW1lX2NvdW50XCIpIGFzIEhUTUxJbnB1dEVsZW1lbnQ7XHJcbiAgICAgICAgbnVtYmVyX29mX2ZyYW1lcy5hZGRFdmVudExpc3RlbmVyKFwiY2hhbmdlXCIsIChlOiBFdmVudCkgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBuZXdfdmFsID0gcGFyc2VJbnQoKDxIVE1MSW5wdXRFbGVtZW50PmUudGFyZ2V0KS52YWx1ZSk7XHJcblxyXG4gICAgICAgICAgICBpZiAoaXNOYU4obmV3X3ZhbCkgfHwgbmV3X3ZhbCA8IDEpIHtcclxuICAgICAgICAgICAgICAgIGFsZXJ0KFwiSW52YWxpZCBudW1iZXIgb2YgZnJhbWVzXCIpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB0aGlzLm1lbW9yeS5pbml0KHRoaXMubWVtb3J5Lm51bWJlcl9vZl9wYWdlcywgbmV3X3ZhbCk7XHJcbiAgICAgICAgICAgIHRoaXMucmVmcmVzaENhbGxzKCk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIGFsZ29yaXRobSBzZWxlY3RcclxuICAgICAgICAgKiAtPiBkaXNhYmxlIHJ1bm5pbmcgd2l0aCBhbmltYXRpb24gaWYgY29tcGFyZV9hbGxcclxuICAgICAgICAgKiAtPiBzaG93IHNwZWNpYWwgb3B0aW9ucyBmb3IgcGFnZSBmYXVsdCBjb250cm9sXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgY29uc3QgYWxnb3JpdGhtX3NlbGVjdCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiYV90eXBlXCIpIGFzIEhUTUxTZWxlY3RFbGVtZW50O1xyXG4gICAgICAgIGFsZ29yaXRobV9zZWxlY3QuYWRkRXZlbnRMaXN0ZW5lcihcImNoYW5nZVwiLCAoZTogRXZlbnQpID0+IHtcclxuICAgICAgICAgICAgaWYgKCg8SFRNTFNlbGVjdEVsZW1lbnQ+ZS50YXJnZXQpLnZhbHVlLnRvTG93ZXJDYXNlKCkgPT09IFwiY29tcGFyZV9hbGxcIikge1xyXG4gICAgICAgICAgICAgICAgKDxIVE1MQnV0dG9uRWxlbWVudD5kb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInJ1bl93aXRoX2FuaW1hdGlvbl9idXR0b25cIikpLnNldEF0dHJpYnV0ZShcImRpc2FibGVkXCIsIFwidHJ1ZVwiKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICg8SFRNTEJ1dHRvbkVsZW1lbnQ+ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJydW5fd2l0aF9hbmltYXRpb25fYnV0dG9uXCIpKS5yZW1vdmVBdHRyaWJ1dGUoXCJkaXNhYmxlZFwiKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKCg8SFRNTFNlbGVjdEVsZW1lbnQ+ZS50YXJnZXQpLnZhbHVlLnRvTG93ZXJDYXNlKCkgPT09IFwiZmF1bHRfY29udHJvbFwiIHx8XHJcbiAgICAgICAgICAgICAgICAoPEhUTUxTZWxlY3RFbGVtZW50PmUudGFyZ2V0KS52YWx1ZS50b0xvd2VyQ2FzZSgpID09PSBcImNvbXBhcmVfYWxsXCIpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICg8SFRNTERpdkVsZW1lbnQ+ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJzX21pbl9wYWdlX2ZhdWx0c19hbGxcIikpLnN0eWxlLmRpc3BsYXkgPSBcImJsb2NrXCI7XHJcbiAgICAgICAgICAgICAgICAoPEhUTUxEaXZFbGVtZW50PmRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwic19tYXhfcGFnZV9mYXVsdHNfYWxsXCIpKS5zdHlsZS5kaXNwbGF5ID0gXCJibG9ja1wiO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgKDxIVE1MRGl2RWxlbWVudD5kb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInNfbWluX3BhZ2VfZmF1bHRzX2FsbFwiKSkuc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xyXG4gICAgICAgICAgICAgICAgKDxIVE1MRGl2RWxlbWVudD5kb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInNfbWF4X3BhZ2VfZmF1bHRzX2FsbFwiKSkuc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIC8qIFxyXG4gICAgICAgICAqIHJlc3VsdHMgYnV0dG9uc1xyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGNvbnN0IHJlc3VsdHNfY2xvc2UgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInJlc3VsdHNfY2xvc2VcIikgYXMgSFRNTEJ1dHRvbkVsZW1lbnQ7XHJcbiAgICAgICAgcmVzdWx0c19jbG9zZS5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xyXG4gICAgICAgICAgICAoPEhUTUxEaXZFbGVtZW50PmRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwicmVzdWx0c193cmFwcGVyXCIpKS5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIC8qXHJcbiAgICAgICAgICogcmVmcmVzaCBjYWxscyBcclxuICAgICAgICAgKi9cclxuICAgICAgICB0aGlzLnJlZnJlc2hDYWxscygpO1xyXG4gICAgfVxyXG5cclxuICAgIGFkZFByb2Nlc3NlcygpOiB2b2lkIHtcclxuICAgICAgICBjb25zdCBwcm9jZXNzX2NvdW50ID0gcGFyc2VJbnQoKDxIVE1MSW5wdXRFbGVtZW50PmRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiY19jb3VudFwiKSkudmFsdWUpO1xyXG5cclxuICAgICAgICBjb25zdCBwYWdlX3JhbmdlX21pbiA9IHBhcnNlSW50KCg8SFRNTElucHV0RWxlbWVudD5kb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInNfbWluX3JhbmdlXCIpKS52YWx1ZSk7XHJcbiAgICAgICAgY29uc3QgcGFnZV9yYW5nZV9tYXggPSBwYXJzZUludCgoPEhUTUxJbnB1dEVsZW1lbnQ+ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJzX21heF9yYW5nZVwiKSkudmFsdWUpO1xyXG5cclxuICAgICAgICBjb25zdCBjYWxsX2NvdW50X21pbiA9IHBhcnNlSW50KCg8SFRNTElucHV0RWxlbWVudD5kb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInNfbWluX2NhbGxzXCIpKS52YWx1ZSk7XHJcbiAgICAgICAgY29uc3QgY2FsbF9jb3VudF9tYXggPSBwYXJzZUludCgoPEhUTUxJbnB1dEVsZW1lbnQ+ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJzX21heF9jYWxsc1wiKSkudmFsdWUpO1xyXG5cclxuICAgICAgICBsZXQgY3VycmVudF9yYW5nZV9taW4gPSAwO1xyXG5cclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHByb2Nlc3NfY291bnQ7IGkrKykge1xyXG4gICAgICAgICAgICBjb25zdCBwYWdlX3JhbmdlID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogKHBhZ2VfcmFuZ2VfbWF4IC0gcGFnZV9yYW5nZV9taW4gKyAxKSkgKyBwYWdlX3JhbmdlX21pbjtcclxuXHJcbiAgICAgICAgICAgIHRoaXMubWVtb3J5LmFkZFByb2Nlc3MobmV3IFByb2Nlc3MoXHJcbiAgICAgICAgICAgICAgICBbY3VycmVudF9yYW5nZV9taW4sIGN1cnJlbnRfcmFuZ2VfbWluICsgcGFnZV9yYW5nZV0sXHJcbiAgICAgICAgICAgICAgICBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAoY2FsbF9jb3VudF9tYXggLSBjYWxsX2NvdW50X21pbiArIDEpKSArIGNhbGxfY291bnRfbWluLFxyXG4gICAgICAgICAgICAgICAgaVxyXG4gICAgICAgICAgICApKTtcclxuICAgICAgICAgICAgdGhpcy5tZW1vcnkucHJvY2Vzc2VzW3RoaXMubWVtb3J5LnByb2Nlc3Nlcy5sZW5ndGggLSAxXS5nZW5lcmF0ZUNhbGxzKCk7XHJcblxyXG4gICAgICAgICAgICBjdXJyZW50X3JhbmdlX21pbiArPSBwYWdlX3JhbmdlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5yZWZyZXNoQ2FsbHMoKTtcclxuICAgIH1cclxuXHJcbiAgICBjbGVhclByb2Nlc3NlcygpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLm1lbW9yeS5jbGVhclByb2Nlc3NlcygpO1xyXG4gICAgICAgIHRoaXMucmVmcmVzaENhbGxzKCk7XHJcbiAgICB9XHJcblxyXG4gICAgYWRkQ2FsbHMoKTogdm9pZCB7XHJcbiAgICAgICAgLyogY29tYmluZSBhbGwgcHJvY2VzcyBjYWxscyBpbnRvIG9uZSBhcnJheSAqL1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5tZW1vcnkucHJvY2Vzc2VzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgdGhpcy5tZW1vcnkucHJvY2Vzc2VzW2ldLmdldENhbGxzKCkubGVuZ3RoOyBqKyspIHtcclxuICAgICAgICAgICAgICAgIHRoaXMubWVtb3J5LmNhbGxfcG9vbC5wdXNoKG5ldyBQYWdlKHRoaXMubWVtb3J5LnByb2Nlc3Nlc1tpXS5nZXRDYWxscygpW2pdLCB0aGlzLm1lbW9yeS5wcm9jZXNzZXNbaV0pKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICAvKiBzaHVmZmxlIGFycmF5ICovXHJcbiAgICAgICAgdGhpcy5tZW1vcnkuY2FsbF9wb29sLnNvcnQoKCkgPT4gTWF0aC5yYW5kb20oKSAtIDAuNSk7XHJcblxyXG4gICAgICAgIHRoaXMucmVmcmVzaENhbGxzKCk7XHJcbiAgICB9XHJcblxyXG4gICAgY2xlYXJDYWxscygpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLm1lbW9yeS5jYWxsX3Bvb2wgPSBbXTtcclxuICAgICAgICB0aGlzLnJlZnJlc2hDYWxscygpO1xyXG4gICAgfVxyXG5cclxuICAgIHJlZnJlc2hDYWxscygpOiB2b2lkIHtcclxuICAgICAgICBjb25zdCBjdXJyZW50X2NvdW50X2VsID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJwX2N1cnJlbnRfY291bnRcIikgYXMgSFRNTFBhcmFncmFwaEVsZW1lbnQ7XHJcbiAgICAgICAgY3VycmVudF9jb3VudF9lbC5pbm5lckhUTUwgPSBgKCR7dGhpcy5tZW1vcnkucHJvY2Vzc2VzLmxlbmd0aC50b1N0cmluZygpfSlgO1xyXG5cclxuICAgICAgICBjb25zdCBnZW5lcmF0ZV9jYWxsX3F1ZXVlX2J1dHRvbiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiZ2VuZXJhdGVfY2FsbF9xdWV1ZV9idXR0b25cIikgYXMgSFRNTEJ1dHRvbkVsZW1lbnQ7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLm1lbW9yeS5wcm9jZXNzZXMubGVuZ3RoID4gMCAmJiB0aGlzLm1lbW9yeS5jYWxsX3Bvb2wubGVuZ3RoID09IDApIHtcclxuICAgICAgICAgICAgZ2VuZXJhdGVfY2FsbF9xdWV1ZV9idXR0b24ucmVtb3ZlQXR0cmlidXRlKFwiZGlzYWJsZWRcIik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBnZW5lcmF0ZV9jYWxsX3F1ZXVlX2J1dHRvbi5hdHRyaWJ1dGVzLnNldE5hbWVkSXRlbShkb2N1bWVudC5jcmVhdGVBdHRyaWJ1dGUoXCJkaXNhYmxlZFwiKSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKiBkaXNwbGF5IGluZGl2aWR1YWwgcHJvY2VzcyBjYWxscyAqL1xyXG4gICAgICAgIGNvbnN0IGFsbF9wcm9jZXNzZXNfZWwgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImFsbF9wcm9jZXNzZXNcIikgYXMgSFRNTERpdkVsZW1lbnQ7XHJcbiAgICAgICAgYWxsX3Byb2Nlc3Nlc19lbC5pbm5lckhUTUwgPSBcIlwiO1xyXG5cclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMubWVtb3J5LnByb2Nlc3Nlcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBjb25zdCBwcm9jZXNzID0gdGhpcy5tZW1vcnkucHJvY2Vzc2VzW2ldO1xyXG5cclxuICAgICAgICAgICAgY29uc3QgcHJvY2Vzc19lbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIpO1xyXG4gICAgICAgICAgICBwcm9jZXNzX2VsLmNsYXNzTGlzdC5hZGQoXCJwcm9jZXNzXCIpO1xyXG5cclxuICAgICAgICAgICAgcHJvY2Vzc19lbC5pbm5lckhUTUwgPSBgPHNwYW4gY2xhc3M9XCJwcm9jZXNzX25hbWVcIj5DYWxscyBvZiBwcm9jZXNzICR7aX06IDwvc3Bhbj4gPHNwYW4gY2xhc3M9XCJwcm9jZXNzX2NhbGxzXCI+JHtwcm9jZXNzLmdldENhbGxzKCkuam9pbihcIiwgXCIpfTwvc3Bhbj48YnIgLz5gO1xyXG5cclxuICAgICAgICAgICAgYWxsX3Byb2Nlc3Nlc19lbC5hcHBlbmRDaGlsZChwcm9jZXNzX2VsKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLm1lbW9yeS5wcm9jZXNzZXMubGVuZ3RoID09IDApIHtcclxuICAgICAgICAgICAgYWxsX3Byb2Nlc3Nlc19lbC5pbm5lckhUTUwgPSBcIjxzcGFuIHN0eWxlPSdjb2xvcjogeWVsbG93Jz5ObyBwcm9jZXNzZXMgYWRkZWQgeWV0Ljwvc3Bhbj5cIjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qIGRpc3BsYXkgY2FsbCBxdWV1ZSAqL1xyXG4gICAgICAgIGNvbnN0IGNhbGxfY291bnRfZWwgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImN1cnJlbnRfY2FsbF9jb3VudFwiKSBhcyBIVE1MUGFyYWdyYXBoRWxlbWVudDtcclxuICAgICAgICBjYWxsX2NvdW50X2VsLmlubmVySFRNTCA9IGAoJHt0aGlzLm1lbW9yeS5jYWxsX3Bvb2wubGVuZ3RoLnRvU3RyaW5nKCl9KWA7XHJcblxyXG4gICAgICAgIGNvbnN0IGNhbGxfcXVldWVfZWwgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcIm1haW5fY2FsbF9xdWV1ZVwiKSBhcyBIVE1MRGl2RWxlbWVudDtcclxuICAgICAgICBjYWxsX3F1ZXVlX2VsLmlubmVySFRNTCA9IHRoaXMubWVtb3J5LmNhbGxfcG9vbC5tYXAoKHBhZ2UpID0+IHsgcmV0dXJuIHBhZ2UuaWQgfSkuam9pbihcIiwgXCIpO1xyXG5cclxuICAgICAgICBpZiAodGhpcy5tZW1vcnkuY2FsbF9wb29sLmxlbmd0aCA9PSAwKSB7XHJcbiAgICAgICAgICAgIGNhbGxfcXVldWVfZWwuaW5uZXJIVE1MID0gXCI8c3BhbiBzdHlsZT0nY29sb3I6IHllbGxvdyc+Tm8gY2FsbHMgaW4gcXVldWUuPC9zcGFuPlwiO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBydW4oYW5pbWF0aW9uPzogYm9vbGVhbiB8IHVuZGVmaW5lZCk6IHZvaWQge1xyXG4gICAgICAgIGlmICh0aGlzLm1lbW9yeS5wcm9jZXNzZXMubGVuZ3RoID4gdGhpcy5tZW1vcnkuZnJhbWVzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICBhbGVydChcIk5vdCBlbm91Z2ggZnJhbWVzIGZvciBhbGwgcHJvY2Vzc2VzXCIpO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCBhbGdTdHIgPSAoPEhUTUxJbnB1dEVsZW1lbnQ+ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJhX3R5cGVcIikpLnZhbHVlO1xyXG4gICAgICAgIGxldCBjb21wYXJlX2FsbDogYm9vbGVhbiA9IGZhbHNlO1xyXG5cclxuICAgICAgICBzd2l0Y2ggKGFsZ1N0ci50b0xvd2VyQ2FzZSgpKSB7XHJcbiAgICAgICAgICAgIGNhc2UgXCJlcXVhbFwiOlxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMubWVtb3J5LnNldEFsZ29yaXRobShuZXcgRXF1YWwoKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNhc2UgXCJwcm9wb3J0aW9uYWxcIjpcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLm1lbW9yeS5zZXRBbGdvcml0aG0obmV3IFByb3BvcnRpb25hbCgpKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY2FzZSBcImZhdWx0X2NvbnRyb2xcIjpcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBtaW5fZnJlcSA9IHBhcnNlRmxvYXQoKDxIVE1MSW5wdXRFbGVtZW50PmRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwic19taW5fcGFnZV9mYXVsdHNcIikpLnZhbHVlKTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBtYXhfZnJlcSA9IHBhcnNlRmxvYXQoKDxIVE1MSW5wdXRFbGVtZW50PmRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwic19tYXhfcGFnZV9mYXVsdHNcIikpLnZhbHVlKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG1pbl9mcmVxID49IG1heF9mcmVxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFsZXJ0KFwiTWluaW11bSBmcmVxdWVuY3kgaGFzIHRvIGJlIHNtYWxsZXIgdGhhbiB0aGUgbWF4aW11bVwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5tZW1vcnkuc2V0QWxnb3JpdGhtKG5ldyBQYWdlRmF1bHRDb250cm9sKG1pbl9mcmVxLCBtYXhfZnJlcSkpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjYXNlIFwibG9jYWxpdHlfbW9kZWxcIjpcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLm1lbW9yeS5zZXRBbGdvcml0aG0obmV3IExvY2FsaXR5TW9kZWwoKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNhc2UgXCJjb21wYXJlX2FsbFwiOlxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbXBhcmVfYWxsID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBhbGVydChcIkludmFsaWQgYWxnb3JpdGhtXCIpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKGNvbXBhcmVfYWxsKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IG1pbl9mcmVxID0gcGFyc2VGbG9hdCgoPEhUTUxJbnB1dEVsZW1lbnQ+ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJzX21pbl9wYWdlX2ZhdWx0c1wiKSkudmFsdWUpO1xyXG4gICAgICAgICAgICBjb25zdCBtYXhfZnJlcSA9IHBhcnNlRmxvYXQoKDxIVE1MSW5wdXRFbGVtZW50PmRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwic19tYXhfcGFnZV9mYXVsdHNcIikpLnZhbHVlKTtcclxuXHJcbiAgICAgICAgICAgIGlmIChtaW5fZnJlcSA+PSBtYXhfZnJlcSkge1xyXG4gICAgICAgICAgICAgICAgYWxlcnQoXCJNaW5pbXVtIGZyZXF1ZW5jeSBoYXMgdG8gYmUgc21hbGxlciB0aGFuIHRoZSBtYXhpbXVtXCIpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBjb25zdCBhbGdvcml0aG1zID0gW1xyXG4gICAgICAgICAgICAgICAgbmV3IEVxdWFsKCksXHJcbiAgICAgICAgICAgICAgICBuZXcgUHJvcG9ydGlvbmFsKCksXHJcbiAgICAgICAgICAgICAgICBuZXcgUGFnZUZhdWx0Q29udHJvbChtaW5fZnJlcSwgbWF4X2ZyZXEpLFxyXG4gICAgICAgICAgICAgICAgLy8gbmV3IExvY2FsaXR5TW9kZWwoKVxyXG4gICAgICAgICAgICBdO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5tZW1vcnkuY29tcGFyZUFsbEFuZERpc3BsYXlSZXN1bHRzKGFsZ29yaXRobXMpO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoYW5pbWF0aW9uKSB7XHJcbiAgICAgICAgICAgIHRoaXMuYW5pbWF0aW9uR1VJLnN0YXJ0QW5pbWF0aW9uKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBjb25zdCByZXN1bHRzID0gdGhpcy5tZW1vcnkuc2ltdWxhdGUoKTtcclxuICAgICAgICAgICAgdGhpcy5tZW1vcnkuZGlzcGxheVJlc3VsdHMocmVzdWx0cyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCBQcm9jZXNzIGZyb20gXCIuL1Byb2Nlc3NcIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBhZ2Uge1xyXG4gICAgaWQ6IG51bWJlclxyXG4gICAgbGFzdF9jYWxsX3RpbWU6IG51bWJlciA9IDBcclxuICAgIHByb2Nlc3M6IFByb2Nlc3NcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihpZDogbnVtYmVyLCBwcm9jZXNzOiBQcm9jZXNzKSB7XHJcbiAgICAgICAgdGhpcy5pZCA9IGlkO1xyXG4gICAgICAgIHRoaXMucHJvY2VzcyA9IHByb2Nlc3M7XHJcbiAgICB9XHJcblxyXG4gICAgY2FsbCh0aW1lOiBudW1iZXIpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLmxhc3RfY2FsbF90aW1lID0gdGltZTtcclxuICAgICAgICB0aGlzLnByb2Nlc3MuZG9uZV9jYWxscysrO1xyXG4gICAgfVxyXG59IiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgUHJvY2VzcyB7XHJcbiAgICByYW5nZV9vZl9wYWdlczogW251bWJlciwgbnVtYmVyXVxyXG4gICAgbnVtYmVyX29mX2NhbGxzOiBudW1iZXJcclxuICAgIGlkOiBudW1iZXJcclxuXHJcbiAgICBwYWdlX2ZhdWx0czogbnVtYmVyID0gMFxyXG4gICAgZG9uZV9jYWxsczogbnVtYmVyID0gMFxyXG5cclxuICAgIHByaXZhdGUgY2FsbHM6IEFycmF5PG51bWJlcj4gPSBbXVxyXG5cclxuICAgIGNvbnN0cnVjdG9yKHJhbmdlX29mX3BhZ2VzOiBbbnVtYmVyLCBudW1iZXJdLCBudW1iZXJfb2ZfY2FsbHM6IG51bWJlciwgaWQ6IG51bWJlcikge1xyXG4gICAgICAgIHRoaXMucmFuZ2Vfb2ZfcGFnZXMgPSByYW5nZV9vZl9wYWdlcztcclxuICAgICAgICB0aGlzLm51bWJlcl9vZl9jYWxscyA9IG51bWJlcl9vZl9jYWxscztcclxuICAgICAgICB0aGlzLmlkID0gaWQ7XHJcbiAgICB9XHJcblxyXG4gICAgZ2VuZXJhdGVDYWxscygpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLmNhbGxzID0gW107XHJcblxyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5udW1iZXJfb2ZfY2FsbHM7IGkrKykge1xyXG4gICAgICAgICAgICB0aGlzLmNhbGxzLnB1c2goTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogKHRoaXMucmFuZ2Vfb2ZfcGFnZXNbMV0gLSB0aGlzLnJhbmdlX29mX3BhZ2VzWzBdKSkgKyB0aGlzLnJhbmdlX29mX3BhZ2VzWzBdKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0Q2FsbHMoKTogQXJyYXk8bnVtYmVyPiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuY2FsbHM7XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IEFsbG9jYXRpb25BbGdvcml0aG0gZnJvbSBcIi4uL0FsbG9jYXRpb25BbGdvcml0aG1cIjtcclxuXHJcbmltcG9ydCBQcm9jZXNzIGZyb20gXCIuLi9Qcm9jZXNzXCI7XHJcbmltcG9ydCBGcmFtZSBmcm9tIFwiLi4vRnJhbWVcIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEVxdWFsIGltcGxlbWVudHMgQWxsb2NhdGlvbkFsZ29yaXRobSB7XHJcbiAgICBuYW1lOiBzdHJpbmcgPSBcIkVxdWFsXCJcclxuXHJcbiAgICBhbGxvY2F0ZUZyYW1lcyhmcmFtZXM6IEFycmF5PEZyYW1lPiwgcHJvY2Vzc2VzOiBSZWFkb25seUFycmF5PFJlYWRvbmx5PFByb2Nlc3M+Pik6IHZvaWQge1xyXG4gICAgICAgIGNvbnN0IGZyYW1lc19wZXJfcHJvY2VzcyA9IE1hdGguZmxvb3IoZnJhbWVzLmxlbmd0aCAvIHByb2Nlc3Nlcy5sZW5ndGgpO1xyXG5cclxuICAgICAgICBjb25zb2xlLmxvZyhgQWxsb2NhdGluZyAke2ZyYW1lc19wZXJfcHJvY2Vzc30gZnJhbWVzIHBlciBwcm9jZXNzYCk7XHJcbiAgICAgICAgY29uc29sZS5sb2coYGRhdGEuY3VycmVudF9mcmFtZXMubGVuZ3RoID0gJHtmcmFtZXMubGVuZ3RofSwgZGF0YS5wcm9jZXNzZXMubGVuZ3RoID0gJHtwcm9jZXNzZXMubGVuZ3RofWApO1xyXG5cclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGZyYW1lcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBpZiAoZnJhbWVzW2ldLnByb2Nlc3MgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgY29udGludWU7IC8vIHNraXAgdGhpcyBmcmFtZSBpZiBpdCdzIGFscmVhZHkgYWxsb2NhdGVkXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGZyYW1lc1tpXS5wcm9jZXNzID0gPFByb2Nlc3M+cHJvY2Vzc2VzW01hdGguZmxvb3IoaSAvIGZyYW1lc19wZXJfcHJvY2VzcyldO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyogdGhlIHJlbWFpbmluZyBmcmFtZXMgYXJlIGxlZnQgdW5hbGxvY2F0ZWQgKi9cclxuICAgIH1cclxufSIsImltcG9ydCBBbGxvY2F0aW9uQWxnb3JpdGhtIGZyb20gXCIuLi9BbGxvY2F0aW9uQWxnb3JpdGhtXCI7XHJcblxyXG5pbXBvcnQgRnJhbWUgZnJvbSBcIi4uL0ZyYW1lXCI7XHJcbmltcG9ydCBQcm9jZXNzIGZyb20gXCIuLi9Qcm9jZXNzXCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBMb2NhbGl0eU1vZGVsIGltcGxlbWVudHMgQWxsb2NhdGlvbkFsZ29yaXRobSB7XHJcbiAgICBuYW1lOiBzdHJpbmcgPSBcIkxvY2FsaXR5TW9kZWxcIlxyXG5cclxuICAgIGFsbG9jYXRlRnJhbWVzKGZyYW1lczogQXJyYXk8RnJhbWU+LCBwcm9jZXNzZXM6IFJlYWRvbmx5QXJyYXk8UmVhZG9ubHk8UHJvY2Vzcz4+KTogdm9pZCB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTWV0aG9kIG5vdCBpbXBsZW1lbnRlZC5cIik7XHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgQWxsb2NhdGlvbkFsZ29yaXRobSBmcm9tIFwiLi4vQWxsb2NhdGlvbkFsZ29yaXRobVwiO1xyXG5cclxuaW1wb3J0IEZyYW1lIGZyb20gXCIuLi9GcmFtZVwiO1xyXG5pbXBvcnQgUHJvY2VzcyBmcm9tIFwiLi4vUHJvY2Vzc1wiO1xyXG5cclxuaW1wb3J0IFByb3BvcnRpb25hbCBmcm9tIFwiLi9Qcm9wb3J0aW9uYWxcIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBhZ2VGYXVsdENvbnRyb2wgaW1wbGVtZW50cyBBbGxvY2F0aW9uQWxnb3JpdGhtIHtcclxuICAgIG5hbWU6IHN0cmluZyA9IFwiUGFnZUZhdWx0Q29udHJvbFwiXHJcbiAgICBydW5fcHJvcG9ydGlvbmFsOiBib29sZWFuID0gdHJ1ZVxyXG5cclxuICAgIG1pbl9mYXVsdF9mcmVxOiBudW1iZXJcclxuICAgIG1heF9mYXVsdHNfZnJlcTogbnVtYmVyXHJcblxyXG4gICAgY29uc3RydWN0b3IobWluX2ZhdWx0X2ZyZXE6IG51bWJlciwgbWF4X2ZhdWx0X2ZyZXE6IG51bWJlcikge1xyXG4gICAgICAgIHRoaXMubWluX2ZhdWx0X2ZyZXEgPSBtaW5fZmF1bHRfZnJlcTtcclxuICAgICAgICB0aGlzLm1heF9mYXVsdHNfZnJlcSA9IG1heF9mYXVsdF9mcmVxO1xyXG4gICAgfVxyXG5cclxuICAgIGFsbG9jYXRlRnJhbWVzKGZyYW1lczogRnJhbWVbXSwgcHJvY2Vzc2VzOiByZWFkb25seSBSZWFkb25seTxQcm9jZXNzPltdKTogdm9pZCB7XHJcbiAgICAgICAgLyogZmlyc3QgcnVuIHByb3BvcnRpb25hbCBhbGxvY2F0aW9uICovXHJcbiAgICAgICAgaWYgKHRoaXMucnVuX3Byb3BvcnRpb25hbCkge1xyXG4gICAgICAgICAgICB0aGlzLnJ1bl9wcm9wb3J0aW9uYWwgPSBmYWxzZTtcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9wb3J0aW9uYWwoKS5hbGxvY2F0ZUZyYW1lcyhmcmFtZXMsIHByb2Nlc3Nlcyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKiB0aGVuIHJ1biBwYWdlIGZhdWx0IGNvbnRyb2wgKi9cclxuICAgICAgICBjb25zdCBNSU5fRkFVTFRTID0gdGhpcy5taW5fZmF1bHRfZnJlcTtcclxuICAgICAgICBjb25zdCBNQVhfRkFVTFRTID0gdGhpcy5tYXhfZmF1bHRzX2ZyZXE7IC8vIGZyZXF1ZW5jeVxyXG5cclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHByb2Nlc3Nlcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBjb25zdCBmYXVsdF9mcmVxdWVuY3kgPSBwcm9jZXNzZXNbaV0ucGFnZV9mYXVsdHMgLyBwcm9jZXNzZXNbaV0uZG9uZV9jYWxscztcclxuICAgICAgICAgICAgY29uc3QgZnJhbWVzX251bWJlciA9IGZyYW1lcy5maWx0ZXIoZnJhbWUgPT4gZnJhbWUucHJvY2VzcyA9PSBwcm9jZXNzZXNbaV0pLmxlbmd0aDtcclxuXHJcbiAgICAgICAgICAgIGlmIChmYXVsdF9mcmVxdWVuY3kgPCBNSU5fRkFVTFRTICYmIGZyYW1lc19udW1iZXIgPiAxKSB7XHJcbiAgICAgICAgICAgICAgICAvKiBkZWFsbG9jYXRlIDEgZnJhbWUgKi9cclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgZnJhbWVzLmxlbmd0aDsgaisrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGZyYW1lc1tqXS5wcm9jZXNzID09IHByb2Nlc3Nlc1tpXSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmcmFtZXNbal0ucHJvY2VzcyA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKGZhdWx0X2ZyZXF1ZW5jeSA+IE1BWF9GQVVMVFMpIHtcclxuICAgICAgICAgICAgICAgIC8qIGFsbG9jYXRlIDEgZnJhbWUgaWYgcG9zc2libGUgKi9cclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgZnJhbWVzLmxlbmd0aDsgaisrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGZyYW1lc1tqXS5wcm9jZXNzID09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZnJhbWVzW2pdLnByb2Nlc3MgPSA8UHJvY2Vzcz5wcm9jZXNzZXNbaV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufSIsImltcG9ydCBBbGxvY2F0aW9uQWxnb3JpdGhtIGZyb20gXCIuLi9BbGxvY2F0aW9uQWxnb3JpdGhtXCI7XHJcblxyXG5pbXBvcnQgUHJvY2VzcyBmcm9tIFwiLi4vUHJvY2Vzc1wiO1xyXG5pbXBvcnQgRnJhbWUgZnJvbSBcIi4uL0ZyYW1lXCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQcm9wb3J0aW9uYWwgaW1wbGVtZW50cyBBbGxvY2F0aW9uQWxnb3JpdGhtIHtcclxuICAgIG5hbWU6IHN0cmluZyA9IFwiUHJvcG9ydGlvbmFsXCJcclxuXHJcbiAgICBhbGxvY2F0ZUZyYW1lcyhmcmFtZXM6IEFycmF5PEZyYW1lPiwgcHJvY2Vzc2VzOiBSZWFkb25seUFycmF5PFJlYWRvbmx5PFByb2Nlc3M+Pik6IHZvaWQge1xyXG4gICAgICAgIGNvbnN0IHRvdGFsX2NhbGxzID0gcHJvY2Vzc2VzLnJlZHVjZSgodG90YWwsIHByb2Nlc3MpID0+IHRvdGFsICsgcHJvY2Vzcy5udW1iZXJfb2ZfY2FsbHMsIDApO1xyXG5cclxuICAgICAgICBsZXQgZnJhbWVzX2FsbG9jYXRlZCA9IDA7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwcm9jZXNzZXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgbGV0IGZyYW1lc19mb3JfcHJvY2VzcyA9IE1hdGguZmxvb3IocHJvY2Vzc2VzW2ldLm51bWJlcl9vZl9jYWxscyAvIHRvdGFsX2NhbGxzICogZnJhbWVzLmxlbmd0aCkgfHwgMTtcclxuXHJcbiAgICAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgZnJhbWVzX2Zvcl9wcm9jZXNzOyBqKyspIHtcclxuICAgICAgICAgICAgICAgIGlmIChmcmFtZXNfYWxsb2NhdGVkID49IGZyYW1lcy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGBUaGVyZSBhcmUgbm90IGVub3VnaCBmcmFtZXMgdG8gYWxsb2NhdGUgYWxsIGZyYW1lcy5gKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoZnJhbWVzW2ZyYW1lc19hbGxvY2F0ZWRdLnByb2Nlc3MgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlOyAvLyBza2lwIHRoaXMgZnJhbWUgaWYgaXQncyBhbHJlYWR5IGFsbG9jYXRlZFxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGZyYW1lc1tmcmFtZXNfYWxsb2NhdGVkXS5wcm9jZXNzID0gPFByb2Nlc3M+cHJvY2Vzc2VzW2ldO1xyXG4gICAgICAgICAgICAgICAgZnJhbWVzX2FsbG9jYXRlZCsrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKiB0aGUgcmVtYWluaW5nIGZyYW1lcyBhcmUgbGVmdCB1bmFsbG9jYXRlZCAqL1xyXG4gICAgfVxyXG59IiwiaW1wb3J0IE1lbnUgZnJvbSBcIi4vY2xhc3Nlcy9NZW51XCI7XHJcblxyXG5mdW5jdGlvbiBtYWluKCkge1xyXG4gICAgaWYgKHR5cGVvZiBkb2N1bWVudCAhPT0gXCJ1bmRlZmluZWRcIikge1xyXG4gICAgICAgIGNvbnN0IG1lbnUgPSBuZXcgTWVudSgpO1xyXG4gICAgICAgIG1lbnUuaW5pdCgpO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgLypcclxuICAgICAgICAqIHJ1biB3aXRoOiB0c2MgJiYgbm9kZSAuXFxkaXN0XFxmcmFtZV9hbGxvY2F0aW9uX3NyY1xcbWFpbi5qc1xyXG4gICAgICAgICovXHJcblxyXG4gICAgfVxyXG59XHJcblxyXG5tYWluKCk7XHJcbiIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIERpc3BsYXkge1xyXG4gICAgY3R4OiBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQgfCBudWxsID0gbnVsbFxyXG4gICAgcmVzaXplQ2FsbGJhY2s6ICgoKSA9PiB2b2lkKSB8IG51bGxcclxuXHJcbiAgICBjb25zdHJ1Y3Rvcigpe1xyXG4gICAgICAgIHRoaXMucmVzaXplQ2FsbGJhY2sgPSBudWxsO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICBpbml0KGVsZW1faWQ6IHN0cmluZyk6IHZvaWQge1xyXG4gICAgICAgIGNvbnN0IGNhbnZhcyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGVsZW1faWQpIGFzIEhUTUxDYW52YXNFbGVtZW50O1xyXG4gICAgICAgIHRoaXMuY3R4ID0gY2FudmFzLmdldENvbnRleHQoJzJkJykgYXMgQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJEO1xyXG5cclxuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInJlc2l6ZVwiLCB0aGlzLnJlc2l6ZVRvRml0LmJpbmQodGhpcykpO1xyXG5cclxuICAgICAgICB0aGlzLnJlc2l6ZVRvRml0KCk7XHJcbiAgICB9XHJcblxyXG4gICAgcmVzaXplVG9GaXQoKTogdm9pZCB7XHJcbiAgICAgICAgaWYgKHRoaXMuY3R4ID09IG51bGwpe1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLmN0eC5jYW52YXMud2lkdGggPSB3aW5kb3cuaW5uZXJXaWR0aDtcclxuICAgICAgICB0aGlzLmN0eC5jYW52YXMuaGVpZ2h0ID0gd2luZG93LmlubmVySGVpZ2h0O1xyXG5cclxuICAgICAgICBpZiAodGhpcy5yZXNpemVDYWxsYmFjayAhPSBudWxsKXtcclxuICAgICAgICAgICAgdGhpcy5yZXNpemVDYWxsYmFjaygpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBzZXRSZXNpemVDYWxsYmFjayhjYWxsYmFjazogKCkgPT4gdm9pZCk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMucmVzaXplQ2FsbGJhY2sgPSBjYWxsYmFjaztcclxuICAgIH1cclxufSIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0Ly8gbm8gbW9kdWxlLmlkIG5lZWRlZFxuXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4iLCIvLyBzdGFydHVwXG4vLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbi8vIFRoaXMgZW50cnkgbW9kdWxlIGlzIHJlZmVyZW5jZWQgYnkgb3RoZXIgbW9kdWxlcyBzbyBpdCBjYW4ndCBiZSBpbmxpbmVkXG52YXIgX193ZWJwYWNrX2V4cG9ydHNfXyA9IF9fd2VicGFja19yZXF1aXJlX18oOTY1KTtcbiJdLCJuYW1lcyI6WyJjb25zdHJ1Y3RvciIsInByb2Nlc3NlcyIsImZyYW1lcyIsImNhbGxfcG9vbCIsImNhbGxfcXVldWUiLCJjYWxsX2hpc3RvcnkiLCJudW1iZXJfb2ZfZnJhbWVzIiwibnVtYmVyX29mX3BhZ2VzIiwiYWxsb2NhdGlvbkFsZ29yaXRobSIsInJlcGxhY2VtZW50QWxnb3JpdGhtIiwidG90YWxfcGFnZV9mYXVsdHMiLCJ0aW1lIiwibGFzdF9jYWxsX2NhdXNlZF9mYXVsdCIsImluaXQiLCJ0aGlzIiwiaSIsInB1c2giLCJhZGRQcm9jZXNzIiwicHJvY2VzcyIsImNsZWFyUHJvY2Vzc2VzIiwiZ2VuZXJhdGVQYWdlQ2FsbFBvb2wiLCJsZW5ndGgiLCJnZW5lcmF0ZUNhbGxzIiwiYWRkUGFnZUNhbGxzVG9Qb29sIiwiZ2V0Q2FsbHMiLCJhZGRQYWdlQ2FsbFRvUG9vbCIsInBhZ2VfY2FsbCIsInBhZ2VfY2FsbHMiLCJjbGVhclBhZ2VDYWxsUG9vbCIsInNldEFsZ29yaXRobSIsImFsZ29yaXRobSIsIm5leHRUaWNrIiwiRXJyb3IiLCJzaGlmdCIsImNvbnNvbGUiLCJ3YXJuIiwibG9nIiwiaWQiLCJhbGxvY2F0ZUZyYW1lcyIsInVuYWxsb2NhdGVkRnJhbWVzTGVuZ3RoIiwiZmlsdGVyIiwiZnJhbWUiLCJvblBhZ2VDYWxsIiwiZ2V0Q3VycmVudFN0YXRlRGF0YSIsInBhZ2VfZmF1bHQiLCJwYWdlIiwicGFnZV9mYXVsdHMiLCJvblBhZ2VBbHJlYWR5SW5NZW1vcnkiLCJmaW5kIiwiaWRfb2ZfZnJhbWVfdG9fcmVwbGFjZSIsImhhbmRsZVBhZ2VGYXVsdCIsImdldEZyYW1lSW5kZXhCeUlkIiwicGFnZV9pbl9tZW1vcnkiLCJjYWxsIiwicHJvY2Vzc19mcmFtZXMiLCJwcm9jZXNzX2NhbGxfaGlzdG9yeSIsImN1cnJlbnRfZnJhbWVzIiwicHJldmlvdXNfcGFnZV9jYWxscyIsImlzRmluaXNoZWQiLCJnZXRSZXN1bHRzIiwidG90YWxfcGFnZV9oaXRzIiwidG90YWxfY2FsbHMiLCJzaW11bGF0ZSIsImRpc3BsYXlSZXN1bHRzIiwicmVzdWx0cyIsImFsZ1N0ciIsIm5hbWUiLCJkb2N1bWVudCIsImdldEVsZW1lbnRCeUlkIiwic3R5bGUiLCJkaXNwbGF5IiwiaW5uZXJIVE1MIiwidG9VcHBlckNhc2UiLCJ0b0ZpeGVkIiwicmVwbGFjZSIsIlJlZ0V4cCIsImNvbXBhcmVBbGxBbmREaXNwbGF5UmVzdWx0cyIsImFsZ29yaXRobXMiLCJyZXN1bHRzX2VsIiwibWVudSIsInZpc2libGUiLCJwbGF5aW5nIiwic3BlZWQiLCJHVUkiLCJNRU5VIiwicGxheV9wYXVzZV9idXR0b24iLCJzdGVwX2J1dHRvbiIsInN0b3BfYnV0dG9uIiwic3BlZWRfc2xpZGVyIiwiaW5mb19hbGdvcml0aG0iLCJpbmZvX3RpbWUiLCJpbmZvX2lzX2RvbmUiLCJpbmZvX2luX3F1ZXVlIiwiaW5mb19maW5pc2hlZCIsImluZm9fdG90YWxfcGFnZV9mYXVsdHMiLCJpbmZvX3RvdGFsX3BhZ2VfaGl0cyIsImZyYW1lX3Jvd3MiLCJzZWVfY29kZV9idXR0b24iLCJzdG9yZWRTZXRJbnRlcnZhbCIsImFkZEV2ZW50TGlzdGVuZXIiLCJ0b2dnbGVQbGF5aW5nIiwic3RlcCIsInRvZ2dsZVZpc2libGUiLCJwYXJzZUludCIsInZhbHVlIiwicmVmcmVzaFNwZWVkIiwibWVtb3J5IiwiYWxnb3JpdGhtTmFtZSIsIndpbmRvdyIsIm9wZW4iLCJmb2N1cyIsImluaXRTdGF0ZVRhYmxlIiwicmVzaXplQ2FsbGJhY2siLCJkcmF3Q3VycmVudFN0YXRlIiwiY2xlYXJJbnRlcnZhbCIsInJlZnJlc2hDYWxscyIsInJlc2V0IiwiZGlzYWJsZWQiLCJzdGFydEFuaW1hdGlvbiIsInJlZnJlc2hJbmZvIiwiZHJhd0NhbGxzIiwidGltZV9yb3ciLCJjYWxsc19yb3ciLCJ0Ym9keSIsInRpbWVfcm93X2hlYWRlciIsImNyZWF0ZUVsZW1lbnQiLCJjbGFzc0xpc3QiLCJhZGQiLCJhcHBlbmRDaGlsZCIsImNhbGxzX3Jvd19oZWFkZXIiLCJsYXN0Q2hpbGQiLCJyZW1vdmVDaGlsZCIsImZyYW1lX3JvdyIsImZyYW1lX3Jvd19oZWFkZXIiLCJTVEFSVF9YIiwiU1RBUlRfWSIsIldJRFRIIiwiSEVJR0hUIiwiY2FsbHNUb0RyYXciLCJuZXdDYWxsIiwiYXQiLCJ0aW1lVGlja0VsIiwiY2FsbHNUaWNrRWwiLCJmcmFtZVRpY2tFbCIsImJhY2tncm91bmRDb2xvciIsInRhYmxlIiwic2Nyb2xsTGVmdCIsInNjcm9sbFdpZHRoIiwidG9TdHJpbmciLCJzZXRJbnRlcnZhbCIsImJpbmQiLCJhZnRlckRvbmUiLCJGcmFtZSIsIm5leHRfaWQiLCJkYXRhIiwiZnJhbWVfdG9fcmVwbGFjZV9pbmRleCIsImxlYXN0X3JlY2VudGx5X3VzZWRfcGFnZV9pbmRleCIsImVycm9yIiwicGFnZV9pbmRleCIsImoiLCJhbmltYXRpb25HVUkiLCJydW4iLCJhZGRQcm9jZXNzZXMiLCJhZGRDYWxscyIsImNsZWFyQ2FsbHMiLCJzZXRSZXNpemVDYWxsYmFjayIsImUiLCJuZXdfdmFsIiwidGFyZ2V0IiwiaXNOYU4iLCJhbGVydCIsInRvTG93ZXJDYXNlIiwic2V0QXR0cmlidXRlIiwicmVtb3ZlQXR0cmlidXRlIiwicHJvY2Vzc19jb3VudCIsInBhZ2VfcmFuZ2VfbWluIiwicGFnZV9yYW5nZV9tYXgiLCJjYWxsX2NvdW50X21pbiIsImNhbGxfY291bnRfbWF4IiwiY3VycmVudF9yYW5nZV9taW4iLCJwYWdlX3JhbmdlIiwiTWF0aCIsImZsb29yIiwicmFuZG9tIiwic29ydCIsImdlbmVyYXRlX2NhbGxfcXVldWVfYnV0dG9uIiwiYXR0cmlidXRlcyIsInNldE5hbWVkSXRlbSIsImNyZWF0ZUF0dHJpYnV0ZSIsImFsbF9wcm9jZXNzZXNfZWwiLCJwcm9jZXNzX2VsIiwiam9pbiIsImNhbGxfcXVldWVfZWwiLCJtYXAiLCJhbmltYXRpb24iLCJjb21wYXJlX2FsbCIsIm1pbl9mcmVxIiwicGFyc2VGbG9hdCIsIm1heF9mcmVxIiwibGFzdF9jYWxsX3RpbWUiLCJkb25lX2NhbGxzIiwicmFuZ2Vfb2ZfcGFnZXMiLCJudW1iZXJfb2ZfY2FsbHMiLCJjYWxscyIsImZyYW1lc19wZXJfcHJvY2VzcyIsIm1pbl9mYXVsdF9mcmVxIiwibWF4X2ZhdWx0X2ZyZXEiLCJydW5fcHJvcG9ydGlvbmFsIiwibWF4X2ZhdWx0c19mcmVxIiwiTUlOX0ZBVUxUUyIsIk1BWF9GQVVMVFMiLCJmYXVsdF9mcmVxdWVuY3kiLCJmcmFtZXNfbnVtYmVyIiwicmVkdWNlIiwidG90YWwiLCJmcmFtZXNfYWxsb2NhdGVkIiwiZnJhbWVzX2Zvcl9wcm9jZXNzIiwiY3R4IiwiZWxlbV9pZCIsImNhbnZhcyIsImdldENvbnRleHQiLCJyZXNpemVUb0ZpdCIsIndpZHRoIiwiaW5uZXJXaWR0aCIsImhlaWdodCIsImlubmVySGVpZ2h0IiwiY2FsbGJhY2siLCJfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18iLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJjYWNoZWRNb2R1bGUiLCJ1bmRlZmluZWQiLCJleHBvcnRzIiwibW9kdWxlIiwiX193ZWJwYWNrX21vZHVsZXNfXyJdLCJzb3VyY2VSb290IjoiIn0=