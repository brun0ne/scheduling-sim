(()=>{"use strict";var e={994:function(e,t,s){var l=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const a=l(s(752)),n=l(s(920)),i=l(s(463));t.default=class{constructor(){this.processes=[],this.frames=[],this.call_pool=[],this.call_queue=[],this.call_history=[],this.number_of_frames=0,this.number_of_pages=0,this.allocationAlgorithm=null,this.replacementAlgorithm=new i.default,this.total_page_faults=0,this.time=0,this.last_call_caused_fault=!1,this.last_empty_queue=!1}init(e){this.number_of_frames=null!=e?e:this.number_of_frames,this.call_queue=[...this.call_pool],this.frames=[],this.call_history=[],this.time=0,this.total_page_faults=0;for(let e=0;e<this.number_of_frames;e++)this.frames.push(new a.default(e));for(const e of this.processes)e.reset()}addProcess(e){this.processes.push(e)}clearProcesses(){this.processes=[]}generatePageCallPool(){for(let e=0;e<this.processes.length;e++)this.processes[e].generateCalls(),this.addPageCallsToPool(this.processes[e].getCalls(),this.processes[e])}addPageCallToPool(e){this.call_pool.push(e)}addPageCallsToPool(e,t){for(let s=0;s<e.length;s++)this.addPageCallToPool(new n.default(e[s],t))}clearPageCallPool(){this.call_pool=[]}setAlgorithm(e){this.allocationAlgorithm=e}nextTick(){var e,t,s,l,a,n;if(null==this.allocationAlgorithm)throw new Error("No algorithm selected");for(const e of this.processes)e.updateRunningStatus(this.frames);this.frames.forEach((e=>{null==e.process||e.process.running||(e.process=null)})),null===(t=(e=this.allocationAlgorithm).allocateFrames)||void 0===t||t.call(e,this.frames,this.processes),this.frames.forEach((e=>{null==e.process&&null!=e.page&&(e.page=null)}));const i=this.frames.filter((e=>null==e.process)).length;i>0&&console.warn(`Not all frames are allocated\nAllocated: ${this.frames.length-i}\nUnallocated: ${i}`);for(const e of this.processes)e.updateRunningStatus(this.frames);let o=null;for(let e=0;e<this.call_queue.length;e++)if(this.call_queue[e].process.running){o=this.call_queue[e],this.call_queue.splice(e,1);break}if(null==o)return console.warn("Empty page call queue or no processes running"),this.time++,void(this.last_empty_queue=!0);if(this.last_empty_queue=!1,this.call_history.push(o),console.log("Page call: "+o.id),o){null===(l=(s=this.replacementAlgorithm).onPageCall)||void 0===l||l.call(s,this.getCurrentStateData(o));let e=!0;for(let t=0;t<this.frames.length;t++){if(null==this.frames[t])throw new Error("Frame is null");if(null==this.frames[t].page&&this.frames[t].process==o.process){this.frames[t].page=o,this.total_page_faults++,o.process.page_faults++,this.last_call_caused_fault=!0,e=!1;break}if(null!=this.frames[t].page&&this.frames[t].page.id==o.id){null===(n=(a=this.replacementAlgorithm).onPageAlreadyInMemory)||void 0===n||n.call(a,this.getCurrentStateData(o)),this.last_call_caused_fault=!1,e=!1;break}}if(e){if(console.log("Page fault: "+o.id),null!=this.frames.find((e=>e.process==o.process&&null==e.page)))throw new Error("Initial page fill not handled properly");this.total_page_faults++,o.process.page_faults++,this.last_call_caused_fault=!0;const e=this.replacementAlgorithm.handlePageFault(this.getCurrentStateData(o));-1!=e&&(this.frames[this.getFrameIndexById(e)].page=o)}let t=!1;for(const e of this.frames)if(null!=e.page&&e.page.id==o.id){t=!0;break}if(!t)throw new Error("Page fault not handled properly - page not in memory");o.call(this.time,this.last_call_caused_fault)}this.time++}getCurrentStateData(e){const t=this.frames.filter((t=>t.process==e.process)),s=this.call_history.filter((t=>t.process==e.process));return{page_call:e,current_frames:t,previous_page_calls:s,processes:this.processes}}isFinished(){return 0==this.call_queue.length}getFrameIndexById(e){for(let t=0;t<this.frames.length;t++)if(this.frames[t].id==e)return t;return-1}getResults(){return{total_page_faults:this.total_page_faults,total_page_hits:this.call_history.length-this.total_page_faults,total_calls:this.call_history.length}}simulate(){for(this.init();!this.isFinished();){this.nextTick();const e=1e4;if(this.time>e){console.warn("Simulation timed out");break}}return this.getResults()}displayResults(e,t=this.allocationAlgorithm.name){document.getElementById("results_wrapper").style.display="flex",document.getElementById("results").innerHTML=`\n        Algorithm: ${t.toUpperCase()}\n\n        Total page faults: <b style='color: red'>${e.total_page_faults.toFixed(0)}</b>\n        Total page hits: <b style='color: lime'>${e.total_page_hits.toFixed(0)}</b>\n        Total page calls: <b>${e.total_calls.toFixed(0)}</b>\n        `.replace(RegExp("\n","g"),"<br />")}compareAllAndDisplayResults(e){document.getElementById("results_wrapper").style.display="flex";const t=document.getElementById("results");t.innerHTML="";for(let s=0;s<e.length;s++){this.setAlgorithm(e[s]);const l=this.simulate();t.innerHTML+=`\n            Algorithm: ${e[s].name.toUpperCase()}\n            Total page faults: <b style='color: red'>${l.total_page_faults.toFixed(0)}</b>\n            Total page hits: <b style='color: lime'>${l.total_page_hits.toFixed(0)}</b>\n            Total page calls: <b>${l.total_calls.toFixed(0)}</b>\n            `.replace(RegExp("\n","g"),"<br />"),t.innerHTML+="<br />"}}}},498:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=class{constructor(e){this.visible=!1,this.playing=!1,this.speed=1,this.GUI=null,this.MENU=null,this.play_pause_button=null,this.step_button=null,this.stop_button=null,this.speed_slider=null,this.info_algorithm=null,this.info_time=null,this.info_is_done=null,this.info_in_queue=null,this.info_finished=null,this.info_total_page_faults=null,this.info_total_page_hits=null,this.frame_rows=[],this.see_code_button=null,this.storedSetInterval=null,this.menu=e}init(){this.GUI=document.getElementById("animation_gui"),this.MENU=document.getElementById("settings"),this.play_pause_button=document.getElementById("animation_play_pause"),this.step_button=document.getElementById("animation_step"),this.stop_button=document.getElementById("animation_stop"),this.speed_slider=document.getElementById("animation_speed_slider"),this.info_algorithm=document.getElementById("animation_info_algorithm_value"),this.info_time=document.getElementById("animation_info_time_value"),this.info_is_done=document.getElementById("animation_is_done"),this.info_in_queue=document.getElementById("calls_in_queue_value"),this.info_finished=document.getElementById("calls_finished_value"),this.info_total_page_faults=document.getElementById("total_page_faults_value"),this.info_total_page_hits=document.getElementById("total_page_hits_value"),this.see_code_button=document.getElementById("code_button"),this.info_is_done.style.display="none",this.play_pause_button.addEventListener("click",(()=>{this.togglePlaying()})),this.step_button.addEventListener("click",(()=>{this.step()})),this.stop_button.addEventListener("click",(()=>{this.toggleVisible(!1)})),this.speed_slider.addEventListener("input",(()=>{this.speed=parseInt(this.speed_slider.value),this.refreshSpeed()})),this.see_code_button.addEventListener("click",(()=>{if(null==this.menu.memory.allocationAlgorithm)return;const e=this.menu.memory.allocationAlgorithm.name;window.open(`https://github.com/brun0ne/scheduling-sim/blob/main/page_replacement_src/classes/algorithms/${e}.ts`,"_blank").focus()})),this.refreshSpeed(),this.initStateTable()}togglePlaying(e){this.playing=null==e?!this.playing:e,this.refreshSpeed(),this.play_pause_button.innerHTML=this.playing?"Pause":"Play"}toggleVisible(e){this.visible=null==e?!this.visible:e,this.visible?(this.GUI.style.display="block",this.MENU.style.display="none",this.menu.display.resizeCallback=()=>{this.drawCurrentState()},this.drawCurrentState()):(this.GUI.style.display="none",this.MENU.style.display="flex",null!=this.storedSetInterval&&clearInterval(this.storedSetInterval),this.menu.display.resizeCallback=()=>{this.menu.refreshCalls()},this.menu.refreshCalls())}reset(){if(null==this.play_pause_button||null==this.info_is_done||null==this.step_button)throw new Error("call init() first!");this.menu.memory.init(),this.play_pause_button.innerHTML="Play",this.playing=!1,this.info_is_done.style.display="none",this.play_pause_button.disabled=!1,this.step_button.disabled=!1,this.initStateTable()}startAnimation(){this.reset(),this.toggleVisible(!0)}drawCurrentState(){this.refreshInfo(),this.drawCalls()}initStateTable(){const e=document.getElementById("animation_table_time"),t=document.getElementById("animation_table_page_calls"),s=document.getElementById("animation_table_body");e.innerHTML="",t.innerHTML="";{const t=document.createElement("th");t.innerHTML="Time",t.classList.add("header"),e.appendChild(t)}{const e=document.createElement("th");e.innerHTML="Page calls",e.classList.add("header"),t.appendChild(e)}{for(;null!=s.lastChild&&"animation_table_page_calls"!=s.lastChild.id;)s.removeChild(s.lastChild);const e=[];for(let t=0;t<this.menu.memory.number_of_frames;t++){const l=document.createElement("tr"),a=document.createElement("th");a.innerHTML=`Frame ${t}`,l.appendChild(a),e.push(l),s.appendChild(l)}this.frame_rows=e}}drawCalls(e,t,s,l,a){const n=document.getElementById("animation_table_time"),i=document.getElementById("animation_table_page_calls"),o=this.menu.memory.call_history.at(-1);if(this.menu.memory.last_empty_queue)return;if(null==o)return;{const e=document.createElement("th");e.innerHTML=`${this.menu.memory.time}`,n.appendChild(e)}{const e=document.createElement("th");e.innerHTML=`${o.id}`,i.appendChild(e)}for(let e=0;e<this.menu.memory.number_of_frames;e++){const t=this.frame_rows[e],s=this.menu.memory.frames[e].page,l=document.createElement("th");l.innerHTML=`${null!=s?s.id:""}`,null!=s&&s.id==o.id&&this.menu.memory.last_call_caused_fault&&(l.style.backgroundColor="red"),null!=this.menu.memory.frames[e].process&&(l.innerHTML+=` <span style='color: yellow'>(${this.menu.memory.frames[e].process.id})</span>`),t.appendChild(l)}const r=document.getElementById("animation_call_table");r.scrollLeft=r.scrollWidth}refreshInfo(){const e=this.menu.memory;if(null==e.allocationAlgorithm)throw new Error("call startAnimation() first!");this.info_algorithm.innerHTML=e.allocationAlgorithm.name,this.info_time.innerHTML=e.time.toString(),e.isFinished()?this.info_is_done.style.display="block":this.info_is_done.style.display="none",this.info_total_page_hits.innerHTML=(e.call_history.length-e.total_page_faults).toString(),this.info_total_page_faults.innerHTML=e.total_page_faults.toString(),this.info_in_queue.innerHTML=e.call_queue.length.toString(),this.info_finished.innerHTML=e.call_history.length.toString()}refreshSpeed(){null!=this.storedSetInterval&&clearInterval(this.storedSetInterval),this.storedSetInterval=setInterval((()=>{this.playing&&this.step()}).bind(this),1e3/this.speed)}step(){this.menu.memory.isFinished()||(this.menu.memory.nextTick(),this.drawCurrentState(),this.menu.memory.isFinished()&&(this.togglePlaying(!1),this.menu.memory.displayResults(this.menu.memory.getResults()),this.afterDone()))}afterDone(){if(null==this.info_is_done||null==this.play_pause_button||null==this.step_button)throw new Error("call init() first!");this.info_is_done.style.display="block",this.play_pause_button.disabled=!0,this.step_button.disabled=!0}}},752:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=class{constructor(e){this.page=null,this.process=null,this.id=e}}},463:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=class{constructor(){this.name="LRU"}handlePageFault(e){let t=-1,s=-1;for(let l=0;l<e.current_frames.length;l++){const a=e.current_frames[l];if(a.process!=e.page_call.process&&console.error("Frame is assigned to a different process - this should be ensured not to happen by the caller"),null==a.page)return console.warn("Frame is empty - this should be ensured not to happen by the caller"),l;let n=-1;for(let t=e.previous_page_calls.length-1;t>=0;t--)if(e.previous_page_calls[t].id==a.page.id){n=t;break}if(-1==n)return l;(n<s||-1==s)&&(t=l,s=n)}return-1==t?(console.warn("No frame to replace found by LRU"),-1):e.current_frames[t].id}}},268:function(e,t,s){var l=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const a=l(s(617)),n=l(s(994)),i=l(s(950)),o=l(s(920)),r=l(s(382)),h=l(s(498)),u=l(s(634)),c=l(s(960)),d=l(s(728));t.default=class{constructor(){this.display=new a.default,this.memory=new n.default,this.animationGUI=new h.default(this)}init(){document.getElementById("run_button").addEventListener("click",(()=>{this.run()})),document.getElementById("run_with_animation_button").addEventListener("click",(()=>{this.run(!0)})),document.getElementById("add_button").addEventListener("click",(()=>{this.addProcesses()})),document.getElementById("clear_button").addEventListener("click",(()=>{this.clearProcesses()})),document.getElementById("generate_call_queue_button").addEventListener("click",(()=>{this.addCalls()})),document.getElementById("clear_call_queue_button").addEventListener("click",(()=>{this.clearCalls()}));const e=parseInt(document.getElementById("s_frame_count").value);this.memory.init(e),this.display.init("main_canvas"),this.animationGUI.init(),this.display.setResizeCallback((()=>{this.refreshCalls()})),document.getElementById("s_frame_count").addEventListener("change",(e=>{const t=parseInt(e.target.value);isNaN(t)||t<1?alert("Invalid number of frames"):(this.memory.init(t),this.refreshCalls())})),document.getElementById("a_type").addEventListener("change",(e=>{"compare_all"===e.target.value.toLowerCase()?document.getElementById("run_with_animation_button").setAttribute("disabled","true"):document.getElementById("run_with_animation_button").removeAttribute("disabled"),"fault_control"===e.target.value.toLowerCase()||"compare_all"===e.target.value.toLowerCase()?(document.getElementById("s_min_page_faults_all").style.display="block",document.getElementById("s_max_page_faults_all").style.display="block",document.getElementById("s_time_window_all").style.display="block"):(document.getElementById("s_min_page_faults_all").style.display="none",document.getElementById("s_max_page_faults_all").style.display="none",document.getElementById("s_time_window_all").style.display="none"),"locality_model"===e.target.value.toLowerCase()||"compare_all"===e.target.value.toLowerCase()?document.getElementById("s_time_window_all").style.display="block":document.getElementById("s_time_window_all").style.display="none"})),document.getElementById("results_close").addEventListener("click",(()=>{document.getElementById("results_wrapper").style.display="none"})),this.refreshCalls()}addProcesses(){const e=parseInt(document.getElementById("c_count").value),t=parseInt(document.getElementById("s_min_range").value),s=parseInt(document.getElementById("s_max_range").value),l=parseInt(document.getElementById("s_min_calls").value),a=parseInt(document.getElementById("s_max_calls").value);let n=0;for(let o=0;o<e;o++){const e=Math.floor(Math.random()*(s-t+1))+t;this.memory.addProcess(new i.default([n,n+e],Math.floor(Math.random()*(a-l+1))+l,o)),this.memory.processes[this.memory.processes.length-1].generateCalls(),n+=e}this.refreshCalls()}clearProcesses(){this.memory.clearProcesses(),this.memory.clearPageCallPool(),this.refreshCalls()}addCalls(){for(let e=0;e<this.memory.processes.length;e++)for(let t=0;t<this.memory.processes[e].getCalls().length;t++)this.memory.call_pool.push(new o.default(this.memory.processes[e].getCalls()[t],this.memory.processes[e]));this.memory.call_pool.sort((()=>Math.random()-.5)),this.refreshCalls()}clearCalls(){this.memory.call_pool=[],this.refreshCalls()}refreshCalls(){document.getElementById("p_current_count").innerHTML=`(${this.memory.processes.length.toString()})`;const e=document.getElementById("generate_call_queue_button");this.memory.processes.length>0&&0==this.memory.call_pool.length?e.removeAttribute("disabled"):e.attributes.setNamedItem(document.createAttribute("disabled"));const t=document.getElementById("all_processes");t.innerHTML="";for(let e=0;e<this.memory.processes.length;e++){const s=this.memory.processes[e],l=document.createElement("span");l.classList.add("process"),l.innerHTML=`<span class="process_name">Calls of process ${e}: </span> <span class="process_calls">${s.getCalls().join(", ")}</span><br />`,t.appendChild(l)}0==this.memory.processes.length&&(t.innerHTML="<span style='color: yellow'>No processes added yet.</span>"),document.getElementById("current_call_count").innerHTML=`(${this.memory.call_pool.length.toString()})`;const s=document.getElementById("main_call_queue");s.innerHTML=this.memory.call_pool.map((e=>e.id)).join(", "),0==this.memory.call_pool.length&&(s.innerHTML="<span style='color: yellow'>No calls in queue.</span>")}run(e){if(this.memory.processes.length>this.memory.frames.length)return void alert("Not enough frames for all processes");const t=document.getElementById("a_type").value;let s=!1;const l=parseFloat(document.getElementById("s_min_page_faults").value),a=parseFloat(document.getElementById("s_max_page_faults").value),n=parseFloat(document.getElementById("s_time_window").value);switch(t.toLowerCase()){case"equal":this.memory.setAlgorithm(new r.default);break;case"proportional":this.memory.setAlgorithm(new u.default);break;case"fault_control":if(l>=a)return void alert("Minimum frequency has to be smaller than the maximum");this.memory.setAlgorithm(new c.default(l,a,n));break;case"locality_model":this.memory.setAlgorithm(new d.default(n));break;case"compare_all":s=!0;break;default:alert("Invalid algorithm")}if(s){if(l>=a)return void alert("Minimum frequency has to be smaller than the maximum");const e=[new r.default,new u.default,new c.default(l,a,n),new d.default(n)];this.memory.compareAllAndDisplayResults(e)}else if(e)this.animationGUI.startAnimation();else{const e=this.memory.simulate();this.memory.displayResults(e)}}}},920:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=class{constructor(e,t){this.last_call_time=0,this.id=e,this.process=t}call(e,t){this.last_call_time=e,this.process.done_calls++,this.process.addToFaultLog(t),this.process.addToCallLog(this)}}},950:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=class{constructor(e,t,s){this.page_faults=0,this.done_calls=0,this.call_log=[],this.fault_log=[],this.running=!0,this.assignedFrames=0,this.calls=[],this.range_of_pages=e,this.number_of_calls=t,this.id=s}reset(){this.page_faults=0,this.done_calls=0,this.running=!0,this.assignedFrames=0,this.fault_log=[],this.call_log=[]}generateCalls(){this.calls=[];for(let e=0;e<this.number_of_calls;e++)this.calls.push(Math.floor(Math.random()*(this.range_of_pages[1]-this.range_of_pages[0]))+this.range_of_pages[0])}getCalls(){return this.calls}addToFaultLog(e){if(this.fault_log.push(e),this.fault_log.length!=this.done_calls)throw new Error("Fault log length does not match done calls")}addToCallLog(e){if(this.call_log.push(e),this.call_log.length!=this.done_calls)throw new Error("Call log length does not match done calls")}updateRunningStatus(e){let t=0;for(const s of e)s.process==this&&t++;if(this.running=t>0,this.done_calls==this.number_of_calls)this.running=!1;else if(this.done_calls>=this.number_of_calls)throw new Error("Process done calls exceeded number of calls");this.assignedFrames=t}getFaultsInLastN(e){return this.fault_log.slice(this.fault_log.length-e,this.fault_log.length).filter((e=>e)).length}getUniquePagesInLastN(e){return this.call_log.slice(this.call_log.length-e,this.call_log.length).map((e=>e.id)).filter(((e,t,s)=>s.indexOf(e)===t)).length}}},382:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=class{constructor(){this.name="Equal"}allocateFrames(e,t){const s=Math.floor(e.length/t.length);console.log(`Allocating ${s} frames per process`);for(let l=0;l<e.length;l++)null==e[l].process&&(e[l].process=t[Math.floor(l/s)])}}},728:function(e,t,s){var l=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const a=l(s(634));t.default=class{constructor(e){this.name="LocalityModel",this.run_proportional=!0,this.time_window=e}allocateFrames(e,t){if(this.run_proportional)return this.run_proportional=!1,(new a.default).allocateFrames(e,t);for(let t=0;t<e.length;t++)e[t].process=null;let s=0;for(const l of t){if(l.done_calls==l.getCalls().length)continue;let t=this.time_window;t>l.call_log.length&&(t=l.call_log.length);let a=l.getUniquePagesInLastN(this.time_window);a<1&&(a=1);for(let t=0;t<e.length;t++)if(null==e[t].process){if(a>0&&(e[t].process=l,a--,s++),0==a)break;if(s==e.length){console.warn("Allocated all frames (LocalityModel)");break}}}}}},960:function(e,t,s){var l=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const a=l(s(634));t.default=class{constructor(e,t,s){this.name="PageFaultControl",this.run_proportional=!0,this.min_fault_freq=e,this.max_faults_freq=t,this.time_window=s}allocateFrames(e,t){if(this.run_proportional)return this.run_proportional=!1,(new a.default).allocateFrames(e,t);const s=this.min_fault_freq,l=this.max_faults_freq;for(let a=0;a<t.length;a++){const n=t[a].getFaultsInLastN(this.time_window);let i=this.time_window;i>t[a].fault_log.length&&(i=t[a].fault_log.length);let o=n/i,r=e.filter((e=>e.process==t[a])).length;if(0==i&&(o=(this.min_fault_freq+this.max_faults_freq)/2),console.log(`Process ${t[a].id} fault frequency: ${o} (${n} / ${i})`),o<s&&r>1)for(let s=0;s<e.length;s++)if(e[s].process==t[a])return e[s].process=null,this.allocateFrames(e,t);if(o>l&&t[a].getCalls().length!=t[a].done_calls)for(let s=0;s<e.length;s++)if(null==e[s].process){e[s].process=t[a];break}}}}},634:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=class{constructor(){this.name="Proportional"}allocateFrames(e,t){const s=t.reduce(((e,t)=>e+t.number_of_calls),0);let l=0;for(let a=0;a<t.length;a++){let n=Math.floor(t[a].number_of_calls/s*e.length);n<1&&(n=1);for(let s=0;s<n;s++){if(l>=e.length){console.error("There are not enough frames to allocate all frames.");break}null==e[l].process&&(e[l].process=t[a],l++)}}}}},965:function(e,t,s){var l=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const a=l(s(268));"undefined"!=typeof document&&(new a.default).init()},617:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=class{constructor(){this.ctx=null,this.resizeCallback=null}init(e){const t=document.getElementById(e);this.ctx=t.getContext("2d"),window.addEventListener("resize",this.resizeToFit.bind(this)),this.resizeToFit()}resizeToFit(){null!=this.ctx&&(this.ctx.canvas.width=window.innerWidth,this.ctx.canvas.height=window.innerHeight,null!=this.resizeCallback&&this.resizeCallback())}setResizeCallback(e){this.resizeCallback=e}}}},t={};!function s(l){var a=t[l];if(void 0!==a)return a.exports;var n=t[l]={exports:{}};return e[l].call(n.exports,n,n.exports,s),n.exports}(965)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,