(()=>{"use strict";var e={268:function(e,t,s){var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=r(s(617)),i=r(s(950)),n=r(s(662)),l=r(s(508)),a=r(s(206)),c=r(s(146));t.default=class{constructor(){this.display=new o.default,this.system=new n.default}init(){document.getElementById("run_button").addEventListener("click",(()=>{this.run()})),document.getElementById("run_with_animation_button").addEventListener("click",(()=>{this.run(!0)})),document.getElementById("add_button").addEventListener("click",(()=>{this.addProcesses()})),document.getElementById("clear_button").addEventListener("click",(()=>{this.clearProcesses()}));const e=parseInt(document.getElementById("s_processor_count").value);this.system.init(e),this.display.init("main_canvas"),this.display.setResizeCallback((()=>{this.refreshCalls()})),document.getElementById("s_processor_count").addEventListener("change",(e=>{const t=parseInt(e.target.value);isNaN(t)||t<1?alert("Invalid processor count"):(this.system.init(t),this.refreshCalls())})),document.getElementById("a_type").addEventListener("change",(e=>{const t=e.target.value.toLowerCase();"compare_all"===t?document.getElementById("run_with_animation_button").setAttribute("disabled","true"):document.getElementById("run_with_animation_button").removeAttribute("disabled"),document.getElementById("s_number_of_tries_all").style.display="random_queries"===t||"compare_all"===t?"block":"none",document.getElementById("s_ask_threshold_all").style.display="sharing"===t||"compare_all"===t?"block":"none"})),document.getElementById("results_close").addEventListener("click",(()=>{document.getElementById("results_wrapper").style.display="none"})),this.refreshCalls()}addProcesses(){const e=parseInt(document.getElementById("c_count").value),t=parseInt(document.getElementById("s_min_load").value),s=parseInt(document.getElementById("s_max_load").value),r=parseInt(document.getElementById("s_min_time").value),o=parseInt(document.getElementById("s_max_time").value);if(isNaN(e)||e<1||isNaN(t)||t<1||isNaN(s)||s<1||isNaN(r)||r<1||isNaN(o)||o<1)alert("Invalid input");else{for(let n=0;n<e;n++){const e=Math.floor(Math.random()*(s-t+1))+t,l=Math.floor(Math.random()*(o-r+1))+r;this.system.addProcess(new i.default(n,e,l))}this.refreshCalls()}}clearProcesses(){this.system.process_pool=[],this.refreshCalls()}refreshCalls(){document.getElementById("p_current_count").innerHTML=`(${this.system.process_pool.length.toString()})`;let e=[];for(const t of this.system.process_pool)e.push(`${t.load}%`);const t=document.getElementById("current_state_wrapper");t.innerHTML=`Process queue: [${e.join(", ")}]`,0==this.system.process_pool.length&&(t.innerHTML='Process queue: [<span style="color: yellow">empty</span>]')}run(e){if(0===this.system.process_pool.length)return void alert("Empty process queue");const t=document.getElementById("a_type").value;let s=!1;const r=parseFloat(document.getElementById("s_load_threshold").value),o=parseFloat(document.getElementById("s_ask_threshold").value),i=parseInt(document.getElementById("s_number_of_tries").value);switch(t.toLowerCase()){case"random_queries":this.system.setAlgorithm(new l.default(r,i));break;case"random_queries_until_success":this.system.setAlgorithm(new a.default(r));break;case"sharing":this.system.setAlgorithm(new c.default(r,o));break;case"compare_all":s=!0;break;default:alert("Invalid algorithm")}if(s){const e=[new l.default(r,i),new a.default(r),new c.default(r,o)];this.system.compareAllAndDisplayResults(e)}else if(e)alert("Not implemented yet");else{const e=this.system.simulate();this.system.displayResults(e)}}}},950:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=class{constructor(e,t,s){if(this.time_ran=0,this.time_needed=0,this.id=e,this.load=t,this.time_needed=s,t<0||t>100)throw new Error(`Invalid load value ${t} for process ${e}`)}tick(){this.time_ran++}ended(){return this.time_ran>=this.time_needed}reset(){this.time_ran=0}}},410:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=class{constructor(e){this.running_processes=[],this.finished_processes=[],this.load_history=[],this.id=e}startProcess(e){this.running_processes.push(e)}calculateLoad(){return this.running_processes.reduce(((e,t)=>e+t.load),0)}calculateAverageLoad(){return this.load_history.reduce(((e,t)=>e+t),0)/this.load_history.length}tick(){this.running_processes.forEach((e=>e.tick()));for(const e of this.running_processes)e.ended()&&this.finished_processes.push(e);this.running_processes=this.running_processes.filter((e=>!e.ended()));const e=this.calculateLoad();return this.load_history.push(e),e}}},662:function(e,t,s){var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.Results=void 0;const o=r(s(410));class i{constructor(){this.total_ticks=0,this.average_load=0,this.std_dev=0,this.migrated=0,this.not_migrated=0,this.postponed=0,this.overloaded_processor_ticks=0}}t.Results=i,t.default=class{constructor(){this.number_of_processors=0,this.processors=[],this.process_pool=[],this.process_queue=[],this.finished_processes=[],this.distributionAlgorithm=null,this.current_result=new i,this.time=0}init(e){this.number_of_processors=null!=e?e:this.number_of_processors,this.process_queue=[...this.process_pool],this.finished_processes=[],this.processors=[];for(let e=0;e<this.number_of_processors;e++)this.processors.push(new o.default(e));this.current_result=new i;for(const e of this.process_queue)e.reset()}addProcess(e){this.process_pool.push(e)}clearProcesses(){this.process_pool=[]}setAlgorithm(e){this.distributionAlgorithm=e}nextTick(){var e,t;if(null==this.distributionAlgorithm)throw new Error("No algorithm selected");const s=this.process_queue.shift();if(null==s)return console.warn("Empty process queue but not finished"),void this.time++;if(s){const r=this.processors[Math.floor(Math.random()*this.processors.length)],o=this.distributionAlgorithm.pickProcessorToMigrateTo(this.getCurrentStateData(s,r));null!=o?(o.startProcess(s),o.id===r.id?this.current_result.not_migrated++:this.current_result.migrated++):this.current_result.postponed++,null===(t=(e=this.distributionAlgorithm).reallocateProcesses)||void 0===t||t.call(e,this.getCurrentStateData(s,null!=o?o:r));for(const e of this.processors)e.tick()>100&&this.current_result.overloaded_processor_ticks++;for(const e of this.processors)for(const t of e.finished_processes)this.finished_processes.includes(t)||this.finished_processes.push(t);null==o&&this.process_queue.unshift(s),this.time++}}getCurrentStateData(e,t){return{process:e,processor:t,all_processors:this.processors,time:this.time}}isFinished(){return 0==this.process_queue.length}getResults(){return this.current_result.average_load=this.calculateAverageLoad(),this.current_result.std_dev=this.calculateStandardDeviation(this.current_result.average_load),this.current_result.total_ticks=this.time,this.current_result}calculateAverageLoad(){return this.processors.reduce(((e,t)=>e+t.calculateAverageLoad()),0)/this.processors.length}calculateStandardDeviation(e){const t=null!=e?e:this.calculateAverageLoad(),s=this.processors.reduce(((e,s)=>e+Math.pow(s.calculateAverageLoad()-t,2)),0)/this.processors.length;return Math.sqrt(s)}simulate(){for(this.init();!this.isFinished();)this.nextTick();return this.getResults()}displayResults(e,t){var s;void 0===t&&(t=null!==(s=this.distributionAlgorithm.display_name)&&void 0!==s?s:this.distributionAlgorithm.name),document.getElementById("results_wrapper").style.display="flex",document.getElementById("results").innerHTML=`\n        Algorithm: ${t}\n\n        Average load: ${e.average_load.toFixed(2)} +- ${e.std_dev.toFixed(2)}\n\n        Total ticks: ${e.total_ticks}\n        Migrated: ${e.migrated}\n        Not migrated: ${e.not_migrated}\n        Postponed: ${e.postponed}\n        Overloaded processor ticks: ${e.overloaded_processor_ticks}\n        `.replace(RegExp("\n","g"),"<br />")}compareAllAndDisplayResults(e){var t;document.getElementById("results_wrapper").style.display="flex";const s=document.getElementById("results");s.innerHTML="";for(let r=0;r<e.length;r++){this.setAlgorithm(e[r]);const o=this.simulate();s.innerHTML+=`\n            Algorithm: <span style="color: yellow">${null!==(t=e[r].display_name)&&void 0!==t?t:e[r].name}</span>\n            Average load: <span style="color: yellow">${o.average_load.toFixed(2)}</span> +- ${o.std_dev.toFixed(2)}\n            Migrations: <span style="color: yellow">${o.migrated}</span> / ${o.not_migrated+o.migrated+o.postponed}\n            Postponed process ticks: <span style="color: yellow">${o.postponed}</span>\n            `.replace(RegExp("\n","g"),"<br />"),s.innerHTML+="<br />"}}}},508:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=class{constructor(e,t){this.name="RandomQueries",this.display_name="Random Queries",this.load_threshold=e,this.number_of_tries=t}pickProcessorToMigrateTo(e){const{processor:t,all_processors:s}=e,r=s.filter((e=>e.id!==t.id)),o=[];for(let e=0;e<this.number_of_tries;e++){const e=r.filter((e=>!o.includes(e)));if(0===e.length)break;const t=e[Math.floor(Math.random()*e.length)];if(t.calculateLoad()<this.load_threshold)return t;o.push(t)}return t}}},206:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=class{constructor(e){this.name="RandomQueriesUntilSuccess",this.display_name="Random Queries Until Success",this.load_threshold=e}pickProcessorToMigrateTo(e){const{processor:t,all_processors:s}=e;if(t.calculateLoad()<this.load_threshold)return t;const r=s.filter((e=>e.id!==t.id));for(const e of r)if(e.calculateLoad()<this.load_threshold)return e;return null}}},146:function(e,t,s){var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=r(s(206));t.default=class{constructor(e,t){this.name="Sharing",this.display_name="Sharing (RQUS + offloading)",this.load_treshold=e,this.ask_threshold=t}pickProcessorToMigrateTo(e){return new o.default(this.load_treshold).pickProcessorToMigrateTo(e)}reallocateProcesses(e){if(!(e.processor.calculateLoad()>this.ask_threshold)){e.all_processors.filter((t=>t.id!==e.processor.id)).sort((()=>Math.random()-.5));for(const t of e.all_processors)if(t.calculateLoad()>this.load_treshold){const s=t.running_processes.pop();if(null!=s){e.processor.startProcess(s);break}}}}}},965:function(e,t,s){var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=r(s(268)),i=r(s(950)),n=r(s(662)),l=r(s(508)),a=r(s(206)),c=r(s(146));!function(){if("undefined"!=typeof document)(new o.default).init();else{const e=new n.default;for(let t=0;t<500;t++)e.addProcess(new i.default(t,Math.floor(50*Math.random()),Math.floor(30*Math.random())));e.init(5);const t=[new l.default(40,5),new a.default(40),new c.default(40,30)];for(const s of t)e.setAlgorithm(s),console.log(e.simulate())}}()},617:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=class{constructor(){this.ctx=null,this.resizeCallback=null}init(e){const t=document.getElementById(e);this.ctx=t.getContext("2d"),window.addEventListener("resize",this.resizeToFit.bind(this)),this.resizeToFit()}resizeToFit(){null!=this.ctx&&(this.ctx.canvas.width=window.innerWidth,this.ctx.canvas.height=window.innerHeight,null!=this.resizeCallback&&this.resizeCallback())}setResizeCallback(e){this.resizeCallback=e}}}},t={};!function s(r){var o=t[r];if(void 0!==o)return o.exports;var i=t[r]={exports:{}};return e[r].call(i.exports,i,i.exports,s),i.exports}(965)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,