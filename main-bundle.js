(()=>{"use strict";var e={258:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=class{constructor(){this.resizeCallback=null}init(e){const t=document.getElementById(e);this.ctx=t.getContext("2d"),window.addEventListener("resize",this.resizeToFit.bind(this)),this.resizeToFit()}resizeToFit(){this.ctx.canvas.width=window.innerWidth,this.ctx.canvas.height=window.innerHeight,null!=this.resizeCallback&&this.resizeCallback()}setResizeCallback(e){this.resizeCallback=e}}},268:function(e,t,s){var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=i(s(258)),l=i(s(950)),r=i(s(822)),o=i(s(76)),a=i(s(20)),u=i(s(711)),c=i(s(106));t.default=class{constructor(){this.scheduler=new r.default,this.display=new n.default,this.scheduler.initAutoPlay(this.display)}init(){document.getElementById("run_button").addEventListener("click",(()=>{this.run()})),document.getElementById("run_with_animation_button").addEventListener("click",(()=>{this.run(!0)})),document.getElementById("add_button").addEventListener("click",(()=>{this.addProcesses()})),document.getElementById("clear_button").addEventListener("click",(()=>{this.clearProcesses()})),document.getElementById("a_type").addEventListener("change",(e=>{"rr"===e.target.value.toLowerCase()?document.getElementById("a_time_quanta_all").style.display="block":document.getElementById("a_time_quanta_all").style.display="none","compare all"===e.target.value.toLowerCase()?document.getElementById("run_with_animation_button").disabled=!0:document.getElementById("run_with_animation_button").disabled=!1})),this.display.init("main_canvas"),this.display.setResizeCallback((()=>{this.refreshProcesses()})),document.getElementById("results_close").addEventListener("click",(()=>{document.getElementById("results_wrapper").style.display="none"}));const e=document.getElementById("animation_play_pause"),t=document.getElementById("animation_stop");document.getElementById("animation_step").addEventListener("click",(()=>{if(this.scheduler.nextTick(),this.scheduler.refreshAnimation(this.display),this.scheduler.isFinished())return this.scheduler.displayResults(),void this.scheduler.afterDone()})),e.addEventListener("click",(()=>{this.scheduler._paused?(this.scheduler.resumeAnimation(),e.innerHTML="Pause"):(this.scheduler.pauseAnimation(),e.innerHTML="Play")})),t.addEventListener("click",(()=>{document.getElementById("settings").style.display="flex",document.getElementById("results_wrapper").style.display="none",document.getElementById("animation_gui").style.display="none",this.display.ctx.clearRect(0,0,this.display.ctx.canvas.width,this.display.ctx.canvas.height),this.scheduler.reset(),document.getElementById("animation_play_pause").innerHTML="Play",this.refreshProcesses(),this.display.setResizeCallback((()=>{this.refreshProcesses()}))})),document.getElementById("animation_speed_slider").addEventListener("input",(e=>{this.scheduler.setAnimationSpeed(parseInt(e.target.value))}))}addProcesses(){const e=parseInt(document.getElementById("p_count").value),t=parseInt(document.getElementById("p_max_run_time").value),s=parseInt(document.getElementById("p_max_arrival_time").value);if(isNaN(e)||isNaN(t)||isNaN(s))alert("Invalid input");else{for(let i=0;i<e;i++){const e=Math.floor(Math.random()*s),i=Math.floor(Math.random()*t)+1;this.scheduler.addProcessToPool(new l.default(e,i))}this.refreshProcesses()}}clearProcesses(){this.scheduler.process_pool=[],this.refreshProcesses()}refreshProcesses(){document.getElementById("p_current_count").innerHTML=`(${this.scheduler.process_pool.length.toString()})`,this.display.ctx.clearRect(0,0,this.display.ctx.canvas.width,this.display.ctx.canvas.height);const e=this.display.ctx.canvas.width/2;let t=e,s=50,i=1,n=this.scheduler.process_pool.reduce(((e,t)=>e+t.run_time),0);for(;10*n*i>this.display.ctx.canvas.width/2*(this.display.ctx.canvas.height/50)*.95;)i*=.5;for(const n of this.scheduler.process_pool){let l=10*n.run_time*i;t+l>this.display.ctx.canvas.width&&(t=e,s+=50),this.display.ctx.fillStyle="black",this.display.ctx.strokeStyle="white",this.display.ctx.fillRect(t,s,l,50),this.display.ctx.strokeRect(t,s,l,50),l>10&&(this.display.ctx.fillStyle="white",this.display.ctx.font="10px Consolas",this.display.ctx.textAlign="center",this.display.ctx.fillText(n.run_time.toString(),t+l/2,s+40)),t+=l}}run(e=!1){if(0===this.scheduler.process_pool.length)return void alert("No processes to run");const t=document.getElementById("a_type").value;let s=!1;switch(t.toLowerCase()){case"fcfs":this.scheduler.setAlgorithm(new o.default);break;case"sjf":this.scheduler.setAlgorithm(new u.default);break;case"srtf":this.scheduler.setAlgorithm(new c.default);break;case"rr":const e=parseInt(document.getElementById("a_time_quanta").value);if(isNaN(e))return void alert("Invalid input");this.scheduler.setAlgorithm(new a.default(e));break;case"compare all":s=!0;break;default:return void console.log("Invalid algorithm")}if(e&&!s)document.getElementById("settings").style.display="none",document.getElementById("results_wrapper").style.display="none",document.getElementById("animation_gui").style.display="block",this.display.ctx.clearRect(0,0,this.display.ctx.canvas.width,this.display.ctx.canvas.height),this.scheduler.refreshAnimation(this.display),this.display.resizeCallback=()=>{this.scheduler.refreshAnimation(this.display)};else{if(s)return void this.scheduler.compareAllAndDisplayResults();const e=this.scheduler.simulate();this.scheduler.displayResults(t,e)}}}},950:function(e,t,s){var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=i(s(498));class l{constructor(e,t){this.id=l.incremented_id,l.incremented_id++,this.start_time=e,this.run_time=t,this.time_left=t,this.wait_time=0,this.visual=new n.default(this)}run(){return this.time_left-=1,this.time_left<=0}getCopy(){const e=new l(this.start_time,this.run_time);return e.id=this.id,e.time_left=this.time_left,e.wait_time=this.wait_time,e}}t.default=l,l.incremented_id=0},822:function(e,t,s){var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=i(s(76)),l=i(s(711)),r=i(s(106)),o=i(s(20));t.default=class{constructor(){this.process_pool=[],this.process_queue=[],this.finished_processes=[],this.time=0,this.previousActiveProcess=null,this._paused=!0,this._speed=1,this._interval=null,this._display=null}setAlgorithm(e){this.algorithm=e}reset(){this.process_queue=[],this.finished_processes=[],this.previousActiveProcess=null,this.time=0,this.pauseAnimation()}addProcessToPool(e){this.process_pool.push(e)}nextTick(){for(const e of this.process_pool)e.start_time==this.time&&this.process_queue.push(e.getCopy());if(this.process_queue.length>0){this.process_queue=this.algorithm.preprocess(this.process_queue);for(const e of this.process_queue)e.wait_time++;let e=this.algorithm.pickNext(this.process_queue,this.previousActiveProcess);e.run()&&(this.finished_processes.push(e),this.process_queue.splice(this.process_queue.indexOf(e),1)),this.previousActiveProcess=e}this.time++}isFinished(){return this.process_pool.length==this.finished_processes.length}getResults(){let e=0;for(const t of this.finished_processes)e+=t.wait_time;return e/=this.finished_processes.length,{avgWaitTime:e,maxTime:Math.max(...this.finished_processes.map((e=>e.wait_time)))}}simulate(){for(;!this.isFinished();)this.nextTick();const e=this.getResults();return this.reset(),e}compareAllAndDisplayResults(){this.setAlgorithm(new n.default);const e=this.simulate();this.reset(),this.setAlgorithm(new l.default);const t=this.simulate();this.reset(),this.setAlgorithm(new r.default);const s=this.simulate();this.reset(),this.setAlgorithm(new o.default(1));const i=this.simulate();this.reset(),this.setAlgorithm(new o.default(3));const a=this.simulate();this.reset();let u=`(average wait time)\n\n        FCFS:   ${e.avgWaitTime.toFixed(2)}\n        SJF:    ${t.avgWaitTime.toFixed(2)}\n        SRTF:   ${s.avgWaitTime.toFixed(2)}\n        RR (1):  ${i.avgWaitTime.toFixed(2)}\n        RR (3):  ${a.avgWaitTime.toFixed(2)}`;u=u.replace(RegExp("\n","g"),"<br>"),document.getElementById("results_wrapper").style.display="flex",document.getElementById("results").innerHTML=u}initAutoPlay(e){this._display=e,null!=this._interval&&clearInterval(this._interval),this._interval=setInterval((()=>{this._paused||(this.nextTick(),this.refreshAnimation(e),this.isFinished()&&(this.pauseAnimation(),this.displayResults(this.algorithm.name),this.afterDone()))}).bind(this),1e3/this._speed)}refreshAnimation(e){this.isFinished()||(document.getElementById("animation_play_pause").disabled=!1,document.getElementById("animation_step").disabled=!1,document.getElementById("animation_is_done").style.display="none");const t=e.ctx,s=e.ctx.canvas.width,i=e.ctx.canvas.height;let n=150;for(const e of this.process_queue){const t=10*e.time_left;e.visual.setPos(n,i/3*2-50,t),n+=t+20}null!=this.previousActiveProcess&&(this.previousActiveProcess.visual.color="#ff0000");for(const e of this.process_queue)e!=this.previousActiveProcess&&(e.visual.color="#ffffff");t.clearRect(0,0,s,i),t.fillStyle="white",t.fillRect(0,i/3*2,s,1),t.strokeStyle="white",t.strokeRect(50,i/3*2-100,50,100),t.font="15px Roboto",t.textAlign="center",t.fillText("Î¼P",75,i/3*2-50);for(const e of this.process_queue)e.visual.x+e.visual.width<s-s/4&&e.visual.draw(t);if(this.process_queue.length>0){const e=this.process_queue[this.process_queue.length-1];e.visual.x+e.visual.width>s-s/4&&(t.font="30px Roboto",t.fillStyle="white",t.fillText("... + "+(this.process_queue.length-1)+" more",s-s/8,i/3*2-50+25))}document.getElementById("animation_info_algorithm_value").innerHTML=this.algorithm.name,document.getElementById("animation_info_time_value").innerHTML=this.time.toString();const l=this.process_pool.length-(this.process_queue.length+this.finished_processes.length),r=document.getElementById("processes_info_left_to_join_value");r.innerHTML=l.toString(),r.style.color=l>0?"yellow":"white",document.getElementById("processes_info_finished_value").innerHTML=this.finished_processes.length.toString()}displayResults(e=this.algorithm.name,t=null){null==t&&(t=this.getResults()),document.getElementById("results_wrapper").style.display="flex",document.getElementById("results").innerHTML=`\n        Algorithm: ${e.toUpperCase()} ${"rr"===e.toLowerCase()?`(${document.getElementById("a_time_quanta").value})`:""}\n\n        Average waiting time: ${t.avgWaitTime.toFixed(2)}\n\n        Maximum waiting time: ${t.maxTime.toFixed(2)}\n        `.replace(RegExp("\n","g"),"<br />")}resumeAnimation(){this._paused=!1}pauseAnimation(){this._paused=!0}setAnimationSpeed(e){this._speed=e,this.initAutoPlay(this._display)}afterDone(){document.getElementById("animation_is_done").style.display="block",document.getElementById("animation_play_pause").disabled=!0,document.getElementById("animation_step").disabled=!0}}},498:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=class{constructor(e){this.process=e,this.height=50,this.color=this.process.start_time>0?"#ff0000":"#00ff00"}setPos(e,t,s=50){this.x=e,this.y=t,this.width=s}draw(e){e.fillStyle=this.color,e.fillRect(this.x,this.y,this.width,this.height)}}},76:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=class{constructor(){this.name="FCFS"}preprocess(e){return e}pickNext(e,t){return e[0]}}},20:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=class{constructor(e){this.name="RR",this.quantum=e}preprocess(e){return e}pickNext(e,t){if(null==t){const t=e[0];return this.current_processIndex=0,this.current_quantum=this.quantum,this.current_quantum--,t}return t.time_left>0&&this.current_quantum>0?(this.current_quantum--,t):t.time_left>0&&this.current_quantum<=0?(this.current_processIndex=(this.current_processIndex+1)%e.length,this.current_quantum=this.quantum,this.current_quantum--,e[this.current_processIndex]):0==t.time_left?(this.current_quantum=this.quantum,this.current_quantum--,this.current_processIndex>=e.length&&(this.current_processIndex=0),e[this.current_processIndex]):void 0}}},711:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=class{constructor(){this.name="SJF"}preprocess(e){return e.sort(((e,t)=>e.run_time-t.run_time))}pickNext(e,t){return null!=t&&t.time_left>0?t:e[0]}}},106:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=class{constructor(){this.name="SRTF"}preprocess(e){return e.sort(((e,t)=>e.time_left-t.time_left))}pickNext(e,t){return e[0]}}},965:function(e,t,s){var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=i(s(268)),l=i(s(950)),r=i(s(822)),o=i(s(20));!function(){if("undefined"!=typeof document){const e=new n.default;e.init(),e.scheduler.addProcessToPool(new l.default(0,2)),e.scheduler.addProcessToPool(new l.default(0,5)),e.scheduler.addProcessToPool(new l.default(0,3)),e.refreshProcesses()}else{const e=new r.default;e.addProcessToPool(new l.default(0,2)),e.addProcessToPool(new l.default(0,1)),e.addProcessToPool(new l.default(0,3)),e.setAlgorithm(new o.default(1)),console.log(e.simulate())}}()}},t={};!function s(i){var n=t[i];if(void 0!==n)return n.exports;var l=t[i]={exports:{}};return e[i].call(l.exports,l,l.exports,s),l.exports}(965)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,